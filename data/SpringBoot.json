{
    "exam_sets": [
        {
            "name": "Spring Boot Practice Set 1",
            "questions": [
                {
                    "id": "sb_q001_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Easy",
                    "question_text": "What is the primary annotation used to enable all of Spring Boot's magic in a main application class?",
                    "options": [
                        "A) @EnableAutoConfiguration",
                        "B) @SpringBootApplication",
                        "C) @ComponentScan",
                        "D) @Configuration"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "@SpringBootApplication is a convenience annotation that adds all of the following: @Configuration, @EnableAutoConfiguration, and @ComponentScan. It's the standard entry point for a Spring Boot application."
                },
                {
                    "id": "sb_q002_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Easy",
                    "question_text": "What is the purpose of Spring Boot Starters?",
                    "options": [
                        "A) To provide a command-line interface for starting and stopping the application.",
                        "B) To provide a set of convenient dependency descriptors to include in your application.",
                        "C) To define the starting point of a Spring batch job.",
                        "D) To automatically start the embedded web server."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot Starters are a set of convenient dependency management providers that you can include in your application. For example, `spring-boot-starter-web` includes all the necessary dependencies for building a web application, like Spring MVC, Jackson, and an embedded Tomcat server."
                },
                {
                    "id": "sb_q003_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "What is the default embedded web server in `spring-boot-starter-web`?",
                    "options": [
                        "A) Jetty",
                        "B) Undertow",
                        "C) GlassFish",
                        "D) Tomcat"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "By default, the `spring-boot-starter-web` starter includes and auto-configures Apache Tomcat as the embedded web server. You can easily switch to others like Jetty or Undertow by modifying your build dependencies."
                },
                {
                    "id": "sb_q004_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Spring Boot Actuator endpoint provides information about the application's health?",
                    "options": [
                        "A) /info",
                        "B) /metrics",
                        "C) /health",
                        "D) /beans"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `/health` endpoint shows application health information. It can be configured to show details about database connectivity, disk space, and other custom health checks. By default, it just shows a simple 'UP' or 'DOWN' status."
                },
                {
                    "id": "sb_q005_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is a combination of @Controller and @ResponseBody?",
                    "options": [
                        "A) @Service",
                        "B) @Component",
                        "C) @RestController",
                        "D) @RequestMapping"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "@RestController is a convenience annotation for creating RESTful controllers. It combines @Controller and @ResponseBody, which eliminates the need to annotate every request handling method with @ResponseBody."
                },
                {
                    "id": "sb_q006_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "In Spring Data JPA, what is the purpose of extending the `JpaRepository` interface?",
                    "options": [
                        "A) It forces the developer to implement all CRUD methods manually.",
                        "B) It provides standard CRUD (Create, Read, Update, Delete) and pagination methods out-of-the-box.",
                        "C) It is used to configure the database connection URL.",
                        "D) It enables JPA auditing features automatically."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By extending `JpaRepository<T, ID>`, your repository interface inherits a full set of methods for basic data access, including saving, deleting, and finding entities. This significantly reduces boilerplate code."
                },
                {
                    "id": "sb_q007_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "What is the name of the default properties file used by Spring Boot?",
                    "options": [
                        "A) config.properties",
                        "B) settings.yml",
                        "C) application.properties",
                        "D) spring.config"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot automatically loads properties from `application.properties` or `application.yml` files located in the `src/main/resources` directory. `application.properties` is the conventional choice."
                },
                {
                    "id": "sb_q008_s1",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to inject a bean dependency in Spring?",
                    "options": [
                        "A) @InjectBean",
                        "B) @Resource",
                        "C) @Autowired",
                        "D) @Provide"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "@Autowired is the primary annotation for enabling Spring's dependency injection. It can be used on constructors, fields, or setter methods to automatically wire in the required beans. @Resource is another option from the Jakarta EE specification."
                },
                {
                    "id": "sb_q009_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "How can you expose all Actuator endpoints over HTTP by default in `application.properties`?",
                    "options": [
                        "A) management.endpoints.web.exposure.include=*",
                        "B) actuator.endpoints.expose=all",
                        "C) management.endpoints.enabled-by-default=true",
                        "D) endpoints.all.enabled=true"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "For security reasons, only the `/health` and `/info` endpoints are exposed over HTTP by default. To expose all available endpoints, you must set `management.endpoints.web.exposure.include=*` in your `application.properties`."
                },
                {
                    "id": "sb_q010_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Easy",
                    "question_text": "Which annotation maps an HTTP GET request to a specific handler method?",
                    "options": [
                        "A) @PostMapping",
                        "B) @GetMapping",
                        "C) @PutMapping",
                        "D) @RequestMapping(method = RequestMethod.GET)"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "@GetMapping is a shortcut annotation for `@RequestMapping(method = RequestMethod.GET)`. It is specifically used to handle HTTP GET requests."
                },
                {
                    "id": "sb_q011_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Easy",
                    "question_text": "Which annotation marks a class as a JPA entity?",
                    "options": [
                        "A) @Table",
                        "B) @Bean",
                        "C) @Component",
                        "D) @Entity"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The `@Entity` annotation from `jakarta.persistence.Entity` is used to specify that a class is an entity and is mapped to a database table."
                },
                {
                    "id": "sb_q012_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Profile` annotation?",
                    "options": [
                        "A) To measure the performance of a method.",
                        "B) To conditionally register a bean based on which Spring profiles are active.",
                        "C) To define a user profile in the application.",
                        "D) To set the logging profile for the application."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@Profile` annotation allows you to indicate that a component is eligible for registration only when one or more specified profiles are active. This is useful for having different bean configurations for different environments (e.g., dev, test, prod)."
                },
                {
                    "id": "sb_q013_s1",
                    "domain": "Spring Core",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to mark a class as a Spring-managed service layer component?",
                    "options": [
                        "A) @Repository",
                        "B) @Controller",
                        "C) @Service",
                        "D) @Bean"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "@Service is a specialization of @Component. It is used to indicate that a class holds business logic. While functionally the same as @Component, it adds semantic value to your application's architecture."
                },
                {
                    "id": "sb_q014_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "How do you extract a path variable from a URL in a Spring MVC controller?",
                    "options": [
                        "A) @RequestParam(\"id\")",
                        "B) @RequestHeader(\"id\")",
                        "C) @PathVariable(\"id\")",
                        "D) @RequestBody"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `@PathVariable` annotation is used to bind a method parameter to a URI template variable. For a request to `/users/{id}`, you would use `@PathVariable(\"id\")` in the method signature."
                },
                {
                    "id": "sb_q015_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is typically used for integration testing a Spring Boot application, loading the full application context?",
                    "options": [
                        "A) @RunWith(SpringRunner.class)",
                        "B) @ContextConfiguration",
                        "C) @SpringBootTest",
                        "D) @WebMvcTest"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@SpringBootTest` is the primary annotation for Spring Boot integration tests. It boots up the entire application context, making it suitable for end-to-end testing."
                },
                {
                    "id": "sb_q016_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Hard",
                    "question_text": "The `@SpringBootApplication` annotation is a composite of three other annotations. Which of the following is NOT one of them?",
                    "options": [
                        "A) @EnableAutoConfiguration",
                        "B) @ComponentScan",
                        "C) @Configuration",
                        "D) @EnableWebMvc"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@SpringBootApplication` combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`. `@EnableWebMvc` is NOT included by default; Spring Boot's auto-configuration provides similar MVC setup when it detects Spring MVC on the classpath."
                },
                {
                    "id": "sb_q017_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "How can you specify an active profile for a Spring Boot application when running it from the command line?",
                    "options": [
                        "A) java -jar my-app.jar --profile=prod",
                        "B) java -jar my-app.jar -Dspring.profiles.active=prod",
                        "C) java -jar my-app.jar --spring.profiles.active=prod",
                        "D) java -jar my-app.jar -Pprod"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "You can activate profiles using a system property (`-D` flag) like `java -jar my-app.jar -Dspring.profiles.active=prod`. Another common way is using command-line arguments: `java -jar my-app.jar --spring.profiles.active=prod` (Option C is also correct, but -D is the standard Java system property way)."
                },
                {
                    "id": "sb_q018_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "In Spring Data JPA, how do you define a repository method to find a user by their email address?",
                    "options": [
                        "A) User findUser(String email);",
                        "B) User findByEmailAddress(String email);",
                        "C) @Query(\"SELECT u FROM User u WHERE u.email = ?1\") User getByEmail(String email);",
                        "D) User findByEmail(String email);"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Data JPA supports derived query methods. It parses the method name and creates a query from it. The convention is `findBy` followed by the property name. So, `findByEmail` will automatically generate a query to find a `User` by its `email` property."
                },
                {
                    "id": "sb_q019_s1",
                    "domain": "Spring Core",
                    "difficulty": "Easy",
                    "question_text": "What is the default scope of a bean in a Spring application context?",
                    "options": [
                        "A) Prototype",
                        "B) Singleton",
                        "C) Request",
                        "D) Session"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, all beans defined in a Spring container are singletons. This means that only one instance of the bean is created per Spring IoC container."
                },
                {
                    "id": "sb_q020_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "How do you add custom information to the `/info` Actuator endpoint using `application.properties`?",
                    "options": [
                        "A) app.info.name=My App",
                        "B) management.info.custom.name=My App",
                        "C) info.app.name=My App",
                        "D) info.build.name=My App"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "You can add arbitrary key-value pairs to the `/info` endpoint by adding properties prefixed with `info.` in your `application.properties` file. For example, `info.app.name=My Awesome App` will appear in the JSON response of the `/info` endpoint."
                },
                {
                    "id": "sb_q021_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "What does the `@ResponseBody` annotation do on a controller method?",
                    "options": [
                        "A) It indicates that the method's return value should be bound to the web response body.",
                        "B) It binds the HTTP request body to a method parameter.",
                        "C) It validates the response body against a schema.",
                        "D) It marks the response as having no body."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `@ResponseBody` annotation tells a controller that the object returned is automatically serialized (e.g., into JSON) and passed back into the `HttpResponse` object. It is used on the method level. `@RequestBody` is used on a parameter level for the opposite purpose."
                },
                {
                    "id": "sb_q022_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@ConfigurationProperties` annotation?",
                    "options": [
                        "A) To define a class as a source of bean definitions.",
                        "B) To bind and validate external configuration (e.g., from .properties files) to a Java object.",
                        "C) To specify the location of configuration files.",
                        "D) To enable conditional configuration based on properties."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ConfigurationProperties` provides a convenient way to inject external application properties into a structured, type-safe POJO. You can bind properties by prefix, for example `@ConfigurationProperties(prefix = \"app.datasource\")`."
                },
                {
                    "id": "sb_q023_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to specify the primary key of an entity?",
                    "options": [
                        "A) @PrimaryKey",
                        "B) @Identifier",
                        "C) @Key",
                        "D) @Id"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The `@Id` annotation from `jakarta.persistence.Id` is used to mark a field in an entity class as the primary key for that entity."
                },
                {
                    "id": "sb_q024_s1",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between `@Component`, `@Service`, and `@Repository` annotations?",
                    "options": [
                        "A) There is no difference; they are interchangeable aliases.",
                        "B) They are used for different bean scopes: singleton, prototype, and request.",
                        "C) They are stereotypes for different application layers and can enable specific behaviors like exception translation.",
                        "D) `@Component` is for web controllers, `@Service` for business logic, and `@Repository` for configuration."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "All three are specializations of `@Component`. While they are all discovered during component scanning, they provide semantic value for different layers: `@Repository` for the persistence layer (which also enables JPA exception translation), `@Service` for the service layer, and `@Component` as a generic stereotype for any Spring-managed component."
                },
                {
                    "id": "sb_q025_s1",
                    "domain": "Spring Boot DevTools",
                    "difficulty": "Easy",
                    "question_text": "What is the primary feature of the `spring-boot-devtools` dependency?",
                    "options": [
                        "A) It provides advanced debugging tools for production environments.",
                        "B) It provides automatic application restarts and live reloads for faster development.",
                        "C) It adds a GUI for managing application dependencies.",
                        "D) It enforces strict coding standards and policies."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot DevTools aims to improve the development-time experience. Its key features include automatic restarts when files on the classpath change, live reload for browser-based content, and sensible development-time configuration defaults."
                },
                {
                    "id": "sb_q026_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "Which class can be used in a controller method to have full control over the HTTP response, including status code, headers, and body?",
                    "options": [
                        "A) HttpResponse",
                        "B) Response",
                        "C) ResponseEntity",
                        "D) RestResponse"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`ResponseEntity` represents the entire HTTP response. You can use it to control the status code, headers, and the body of the response, providing more flexibility than just returning the body object directly."
                },
                {
                    "id": "sb_q027_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to test only the web layer (controllers) of a Spring Boot application?",
                    "options": [
                        "A) @SpringBootTest",
                        "B) @DataJpaTest",
                        "C) @Test",
                        "D) @WebMvcTest"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@WebMvcTest` is used for testing Spring MVC controllers without loading the full application context. It auto-configures the Spring MVC infrastructure and limits the scanned beans to those related to the web layer (like `@Controller`, `@RestController`, etc.)."
                },
                {
                    "id": "sb_q028_s1",
                    "domain": "Spring Security",
                    "difficulty": "Easy",
                    "question_text": "Which starter dependency should you add to enable basic security features in a Spring Boot application?",
                    "options": [
                        "A) spring-boot-starter-security",
                        "B) spring-boot-starter-auth",
                        "C) spring-boot-starter-web-security",
                        "D) spring-boot-starter-protection"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "To add Spring Security to your application, you need to include the `spring-boot-starter-security` dependency. Once added, Spring Boot auto-configures a basic security setup, including a login page and HTTP Basic authentication for all endpoints."
                },
                {
                    "id": "sb_q029_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "If a property is defined in both `application.properties` and as a command-line argument, which one takes precedence?",
                    "options": [
                        "A) The one in `application.properties`.",
                        "B) The one passed as a command-line argument.",
                        "C) They are merged together.",
                        "D) It will cause an application startup failure."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot has a well-defined order of property sources. Command-line arguments have a higher precedence than properties defined in `application.properties`. This allows you to override specific settings at runtime."
                },
                {
                    "id": "sb_q030_s1",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Qualifier` annotation?",
                    "options": [
                        "A) To specify a bean's scope.",
                        "B) To provide a unique name for a bean definition.",
                        "C) To disambiguate bean references when multiple beans of the same type exist.",
                        "D) To mark a bean as the primary candidate for autowiring."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "When you have multiple beans of the same type (e.g., two different implementations of an interface), Spring's `@Autowired` doesn't know which one to inject. You can use `@Qualifier(\"beanName\")` along with `@Autowired` to specify which exact bean you want to wire."
                },
                {
                    "id": "sb_q031_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "Which Actuator endpoint provides a list of all Spring beans in the application context?",
                    "options": [
                        "A) /configprops",
                        "B) /beans",
                        "C) /mappings",
                        "D) /env"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `/beans` endpoint displays a complete list of all singleton beans in your application's `ApplicationContext`. It shows the bean's name, its scope, its type, and its dependencies."
                },
                {
                    "id": "sb_q032_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "What is the function of the `@Transactional` annotation?",
                    "options": [
                        "A) It enables the translation of data access exceptions.",
                        "B) It defines the scope of a single database transaction.",
                        "C) It configures the transaction isolation level for the entire application.",
                        "D) It marks a method for asynchronous execution in a separate transaction."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@Transactional` annotation is used to demarcate a transaction boundary. When applied to a method, Spring creates a proxy that starts a new transaction before the method executes and commits it upon successful completion or rolls it back if an unhandled exception occurs."
                },
                {
                    "id": "sb_q033_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to bind an entire HTTP request body to a method parameter object in a controller?",
                    "options": [
                        "A) @ResponseBody",
                        "B) @RequestParam",
                        "C) @ModelAttribute",
                        "D) @RequestBody"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@RequestBody` is used on a method parameter to indicate that the parameter should be bound to the body of the web request. Spring's `HttpMessageConverter`s are used to convert the raw request body (e.g., JSON) into the target Java object."
                },
                {
                    "id": "sb_q034_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is 'auto-configuration' in Spring Boot?",
                    "options": [
                        "A) The automatic generation of controller and service classes.",
                        "B) The process of automatically configuring your Spring application based on the jar dependencies you have added.",
                        "C) The automatic configuration of IDE settings for a Spring project.",
                        "D) The automatic deployment of the application to a cloud server."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Auto-configuration is a key feature of Spring Boot. It attempts to automatically configure your Spring application based on the dependencies present on the classpath. For example, if it finds an H2 database jar, it will auto-configure an in-memory database connection."
                },
                {
                    "id": "sb_q035_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "Which file format, besides `.properties`, is commonly used for configuration in Spring Boot and supports a hierarchical structure?",
                    "options": [
                        "A) .xml",
                        "B) .json",
                        "C) .yml",
                        "D) .txt"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "YAML (`.yml` or `.yaml`) is a popular alternative to `.properties` files. It uses indentation to represent hierarchical data, which many developers find more readable for complex configurations."
                },
                {
                    "id": "sb_q036_s1",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "How can you define a bean in a Spring `@Configuration` class?",
                    "options": [
                        "A) By annotating a class with `@Bean`.",
                        "B) By annotating a method with `@Bean`.",
                        "C) By annotating a field with `@Bean`.",
                        "D) By implementing the `BeanDefinition` interface."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Within a class annotated with `@Configuration`, you can declare beans by annotating methods with `@Bean`. The return value of the method will be registered as a bean in the Spring application context, and the method name becomes the bean's ID."
                },
                {
                    "id": "sb_q037_s1",
                    "domain": "Spring AOP",
                    "difficulty": "Medium",
                    "question_text": "What is an 'Aspect' in Aspect-Oriented Programming (AOP)?",
                    "options": [
                        "A) A specific point during the execution of a program, such as a method execution.",
                        "B) A class that implements cross-cutting concerns, such as logging or security.",
                        "C) The object being advised by one or more aspects.",
                        "D) The action taken by an aspect at a particular join point."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An Aspect is a module (often a regular class annotated with `@Aspect`) that encapsulates a cross-cutting concern. It contains 'Advice' (the code to be executed) and 'Pointcuts' (expressions that define where the advice should be applied)."
                },
                {
                    "id": "sb_q038_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "In a `@WebMvcTest`, how can you inject a mock implementation of a service that a controller depends on?",
                    "options": [
                        "A) @Inject",
                        "B) @Autowired",
                        "C) @Mock",
                        "D) @MockBean"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@MockBean` is a Spring Boot annotation that adds a mock of a specific class or interface to the application context. This is extremely useful in sliced tests like `@WebMvcTest` where you want to test the controller in isolation without involving the actual service layer logic."
                },
                {
                    "id": "sb_q039_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Hard",
                    "question_text": "Which interface should you extend in Spring Data to get both CRUD and pagination/sorting functionality?",
                    "options": [
                        "A) CrudRepository",
                        "B) Repository",
                        "C) PagingAndSortingRepository",
                        "D) JpaRepository"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`JpaRepository` extends `PagingAndSortingRepository`, which in turn extends `CrudRepository`. Therefore, `JpaRepository` provides the most comprehensive set of features out-of-the-box, including basic CRUD operations, pagination and sorting, and JPA-specific methods like flushing and batch deleting."
                },
                {
                    "id": "sb_q040_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `@ControllerAdvice`?",
                    "options": [
                        "A) To provide advice (AOP) specifically for controller beans.",
                        "B) To share common `@ModelAttribute` methods across multiple controllers.",
                        "C) To handle exceptions globally across the whole application in a single component.",
                        "D) All of the above."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@ControllerAdvice` is a powerful annotation that allows you to use `@ExceptionHandler`, `@InitBinder`, and `@ModelAttribute` methods across all or a subset of controllers. It's most commonly used for creating a global exception handler, but it can also be used to share common model attributes or data binders."
                },
                {
                    "id": "sb_q041_s1",
                    "domain": "Spring Security",
                    "difficulty": "Medium",
                    "question_text": "By default, Spring Security protects all HTTP endpoints. How would you configure it to permit all requests to `/api/public/**`?",
                    "options": [
                        "A) By configuring a `SecurityFilterChain` bean and using `requestMatchers(\"/api/public/**\").permitAll()`.",
                        "B) By adding `security.ignored=/api/public/**` to `application.properties`.",
                        "C) By annotating the public controller with `@PermitAll`.",
                        "D) By creating a file named `security.config` with the path."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The modern (Spring Security 5.7+) way to configure security is by defining a `SecurityFilterChain` bean. Within this configuration, you use an `HttpSecurity` object to set up rules, such as `http.authorizeHttpRequests(auth -> auth.requestMatchers(\"/api/public/**\").permitAll().anyRequest().authenticated())`."
                },
                {
                    "id": "sb_q042_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "How can you load a custom-named properties file, like `my-config.properties`, in Spring Boot?",
                    "options": [
                        "A) It is loaded automatically if it's in the resources folder.",
                        "B) By using the `@PropertySource(\"classpath:my-config.properties\")` annotation on a configuration class.",
                        "C) By setting `spring.config.name=my-config` in the environment variables.",
                        "D) Both B and C are valid ways."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "You can use `@PropertySource` to explicitly load a properties file into the Spring `Environment`. Alternatively, you can use the `spring.config.name` and/or `spring.config.location` properties (e.g., as command-line args or system properties) to tell Spring Boot where to look for configuration files."
                },
                {
                    "id": "sb_q043_s1",
                    "domain": "Spring Core",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `@Autowired` and constructor injection?",
                    "options": [
                        "A) There is no difference, they achieve the same result.",
                        "B) `@Autowired` is for fields, while constructor injection is for methods.",
                        "C) Constructor injection makes dependencies mandatory and ensures an object is fully initialized, while field injection is optional.",
                        "D) Constructor injection is the older way; `@Autowired` on fields is the recommended modern approach."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Constructor injection is generally the recommended approach. It clearly defines the mandatory dependencies for a class and ensures they are not null. It also makes the class easier to test without a Spring context. Field injection (using `@Autowired` on a field) can lead to objects that are not fully initialized and can hide dependencies."
                },
                {
                    "id": "sb_q044_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Easy",
                    "question_text": "What is the purpose of the `main` method in a `@SpringBootApplication` class?",
                    "options": [
                        "A) It is the entry point for starting the Spring Boot application.",
                        "B) It is used for running unit tests.",
                        "C) It is a placeholder and is not actually used.",
                        "D) It is used to define global variables."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `main` method is the standard Java entry point. In a Spring Boot application, this method typically contains a single line: `SpringApplication.run(MyApplication.class, args);`, which bootstraps the entire application, creates the application context, and starts the embedded server."
                },
                {
                    "id": "sb_q045_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Actuator endpoint would you check to see all environment properties, including system properties, environment variables, and properties from `application.properties`?",
                    "options": [
                        "A) /beans",
                        "B) /configprops",
                        "C) /env",
                        "D) /info"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `/env` endpoint exposes properties from Spring's `ConfigurableEnvironment`. It provides a comprehensive view of all property sources and the properties they contain, showing the final resolved values and where they came from."
                },
                {
                    "id": "sb_q046_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "How does Spring Boot's 'relaxed binding' work for properties?",
                    "options": [
                        "A) It allows properties to be defined without a value.",
                        "B) It automatically converts property types, like string to integer.",
                        "C) It allows environment properties to be written in different formats (e.g., `app.my-prop`, `APP_MY_PROP`, `app.myProp`) and still be bound to the same field.",
                        "D) It ignores properties that cannot be bound, preventing startup failure."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Relaxed binding is a feature that allows property keys to be written in various formats (kebab-case, camelCase, snake_case) and still map to the same target field. For example, `app.connection-timeout` in a .yml file and `APP_CONNECTION_TIMEOUT` as an environment variable can both bind to a field named `connectionTimeout`."
                },
                {
                    "id": "sb_q047_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "How do you enable JPA auditing features like automatically setting `createdDate` and `lastModifiedDate` fields?",
                    "options": [
                        "A) By adding `@EnableJpaAuditing` to a configuration class.",
                        "B) It is enabled by default when using `spring-boot-starter-data-jpa`.",
                        "C) By adding `@Auditable` to your entity classes.",
                        "D) By setting `spring.jpa.auditing.enabled=true` in `application.properties`."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "To enable JPA auditing, you need to add the `@EnableJpaAuditing` annotation to one of your `@Configuration` classes. Then, you can annotate fields in your entity with `@CreatedDate`, `@LastModifiedDate`, `@CreatedBy`, and `@LastModifiedBy`."
                },
                {
                    "id": "sb_q048_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "What is the default HTTP status code for a successful POST request in a Spring `@RestController` that returns an object?",
                    "options": [
                        "A) 201 Created",
                        "B) 204 No Content",
                        "C) 200 OK",
                        "D) 202 Accepted"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "By default, if a controller method successfully executes and returns a body, Spring MVC will return a `200 OK` status. To return a `201 Created` (which is often more semantically correct for a resource creation), you should wrap the response in a `ResponseEntity` and set the status explicitly."
                },
                {
                    "id": "sb_q049_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `@DataJpaTest`?",
                    "options": [
                        "A) It tests the full application stack, including the web layer and database.",
                        "B) It tests only the persistence layer, including repositories and entities.",
                        "C) It tests the application with a real production database.",
                        "D) It is an alias for `@SpringBootTest`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@DataJpaTest` is a slice test annotation that focuses only on the JPA components. It disables full auto-configuration and instead applies only configuration relevant to JPA tests (like configuring an in-memory database, scanning for `@Entity` classes, and configuring Spring Data repositories)."
                },
                {
                    "id": "sb_q050_s1",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation can be used to provide a default bean when multiple candidates are available for autowiring?",
                    "options": [
                        "A) @Default",
                        "B) @Primary",
                        "C) @Fallback",
                        "D) @Main"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When you have multiple beans of the same type, you can annotate one of them with `@Primary`. This tells Spring that this bean should be given preference when a single candidate is required for an autowiring scenario, avoiding a `NoUniqueBeanDefinitionException`."
                },
                {
                    "id": "sb_q051_s1",
                    "domain": "Spring AOP",
                    "difficulty": "Medium",
                    "question_text": "What is a 'Join Point' in AOP?",
                    "options": [
                        "A) A predicate that matches join points.",
                        "B) The action taken by an aspect.",
                        "C) A point during the execution of a program, such as the execution of a method or the handling of an exception.",
                        "D) The object being advised by one or more aspects."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A Join Point is a specific point in the execution of the application. In Spring AOP, a join point is always the execution of a method. It's the 'where' an aspect can be applied."
                },
                {
                    "id": "sb_q052_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Hard",
                    "question_text": "How can you disable a specific auto-configuration class in Spring Boot?",
                    "options": [
                        "A) By setting `spring.autoconfigure.enabled=false` for that class.",
                        "B) By deleting the class from the classpath.",
                        "C) Using the `exclude` attribute of `@EnableAutoConfiguration` or `@SpringBootApplication`.",
                        "D) By annotating the class with `@Disabled`."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "You can selectively disable specific auto-configuration classes using the `exclude` attribute, like `@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})`. This is useful when you want to provide your own custom configuration for a feature that Spring Boot would normally auto-configure."
                },
                {
                    "id": "sb_q053_s1",
                    "domain": "Spring Caching",
                    "difficulty": "Medium",
                    "question_text": "Which annotation do you add to a configuration class to enable Spring's caching abstraction?",
                    "options": [
                        "A) @EnableCaching",
                        "B) @UseCache",
                        "C) @CacheConfig",
                        "D) @StartCaching"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `@EnableCaching` annotation, when placed on a `@Configuration` class, triggers a post-processor that scans for beans annotated with caching annotations (like `@Cacheable` or `@CacheEvict`) and wraps them in a proxy to handle caching behavior."
                },
                {
                    "id": "sb_q054_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "How do you set the server port for a Spring Boot application in `application.properties`?",
                    "options": [
                        "A) app.port=8081",
                        "B) http.server.port=8081",
                        "C) server.port=8081",
                        "D) spring.port=8081"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The port for the embedded web server is configured using the `server.port` property. For example, `server.port=8090` will start the application on port 8090 instead of the default 8080."
                },
                {
                    "id": "sb_q055_s1",
                    "domain": "Spring MVC",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to map HTTP requests to handler methods of MVC and REST controllers?",
                    "options": [
                        "A) @Handler",
                        "B) @Action",
                        "C) @RequestMapping",
                        "D) @Path"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@RequestMapping` is a versatile annotation used to map web requests onto specific handler classes and/or handler methods. It can be configured with URL paths, HTTP methods, request parameters, headers, and media types."
                },
                {
                    "id": "sb_q056_s1",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "Which property in `application.properties` allows you to see the SQL statements generated by Hibernate?",
                    "options": [
                        "A) spring.jpa.show-sql=true",
                        "B) hibernate.show_sql=true",
                        "C) spring.datasource.show-sql=true",
                        "D) logging.level.org.hibernate.SQL=DEBUG"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Setting `spring.jpa.show-sql=true` will log all generated SQL statements to the console. For more control over formatting and to see bound parameter values, it is often better to use `logging.level.org.hibernate.SQL=DEBUG` and `logging.level.org.hibernate.type.descriptor.sql=TRACE`."
                },
                {
                    "id": "sb_q057_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is a `CommandLineRunner` in Spring Boot?",
                    "options": [
                        "A) A utility for parsing command-line arguments.",
                        "B) An interface used to execute code after the Spring application context has started.",
                        "C) A tool for running the Spring Boot application from the command line.",
                        "D) A component for building command-line based applications."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "If you need to run specific code once the `SpringApplication` has started, you can implement the `CommandLineRunner` or `ApplicationRunner` interface. Both provide a `run` method that will be called after the application context is loaded, which is useful for tasks like data seeding."
                },
                {
                    "id": "sb_q058_s1",
                    "domain": "Spring Security",
                    "difficulty": "Medium",
                    "question_text": "When using `spring-boot-starter-security`, what is the default username?",
                    "options": [
                        "A) admin",
                        "B) root",
                        "C) user",
                        "D) test"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "By default, Spring Security auto-configures a user with the username 'user' and a randomly generated password that is printed to the console on application startup."
                },
                {
                    "id": "sb_q059_s1",
                    "domain": "Spring Core",
                    "difficulty": "Easy",
                    "question_text": "What does IoC stand for in the context of Spring?",
                    "options": [
                        "A) In-memory Object Caching",
                        "B) Inversion of Control",
                        "C) Inter-object Communication",
                        "D) Integration of Components"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "IoC, or Inversion of Control, is a fundamental principle in Spring. Instead of your application objects creating their own dependencies, the Spring IoC container is responsible for 'inverting' the control by creating and wiring the objects together. This is also known as Dependency Injection."
                },
                {
                    "id": "sb_q060_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "You have `application.properties` and `application-dev.properties`. How do you make the `dev` profile active so `application-dev.properties` is used?",
                    "options": [
                        "A) Rename `application-dev.properties` to `application.properties`.",
                        "B) Add `include-profile=dev` to `application.properties`.",
                        "C) Set the property `spring.profiles.active=dev`.",
                        "D) Add `@Profile(\"dev\")` to the main application class."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot automatically loads profile-specific properties from files named `application-{profile}.properties`. To activate a profile, you must set the `spring.profiles.active` property, for example, by passing a command-line argument `--spring.profiles.active=dev` or setting it in the main `application.properties`."
                },
                {
                    "id": "sb_q061_s1",
                    "domain": "Spring Caching",
                    "difficulty": "Medium",
                    "question_text": "Which annotation would you use on a method to cache its return value?",
                    "options": [
                        "A) @CacheEvict",
                        "B) @CachePut",
                        "C) @Caching",
                        "D) @Cacheable"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The `@Cacheable` annotation is used on a method to indicate that the result of invoking the method can be cached. Subsequent calls with the same arguments will return the cached value directly without executing the method again."
                },
                {
                    "id": "sb_q062_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring-boot-starter-test` dependency?",
                    "options": [
                        "A) It only provides JUnit 5.",
                        "B) It is a starter for creating performance tests.",
                        "C) It provides a core set of testing libraries including JUnit, Spring Test, AssertJ, and Mockito.",
                        "D) It is only used for integration tests, not unit tests."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `spring-boot-starter-test` is the primary starter for all testing in Spring Boot. It bundles a collection of essential testing libraries: JUnit 5 (for running tests), Spring Test & Spring Boot Test (for integration testing), AssertJ (for fluent assertions), and Mockito (for creating mocks)."
                },
                {
                    "id": "sb_q063_s1",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "How can you run a Spring Boot application as a traditional WAR file instead of a standalone JAR?",
                    "options": [
                        "A) It is not possible with Spring Boot.",
                        "B) By changing the packaging type in the build file (e.g., `<packaging>war</packaging>` in Maven) and extending `SpringBootServletInitializer`.",
                        "C) By simply renaming the .jar file to .war.",
                        "D) By adding the `spring-boot-starter-war` dependency."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "To create a deployable WAR file, you need to change the project packaging to `war` in your `pom.xml` or `build.gradle`, mark the embedded server dependency as `provided`, and make your main application class extend `SpringBootServletInitializer` and override its `configure` method."
                },
                {
                    "id": "sb_q064_s1",
                    "domain": "Spring Core",
                    "difficulty": "Hard",
                    "question_text": "Which of these is NOT a valid bean scope in a standard Spring web-aware ApplicationContext?",
                    "options": [
                        "A) singleton",
                        "B) prototype",
                        "C) request",
                        "D) transaction"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "In a web-aware Spring ApplicationContext, standard scopes are `singleton`, `prototype`, `request`, `session`, `application`, and `websocket`. `transaction` is not a standard bean scope, although a bean's lifecycle can be tied to a transaction in other ways."
                },
                {
                    "id": "sb_q065_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "What is the primary purpose of Spring Boot Actuator?",
                    "options": [
                        "A) To provide additional security layers for the application.",
                        "B) To help you monitor and manage your application in production.",
                        "C) To actuate or trigger business logic workflows.",
                        "D) To simplify the creation of REST APIs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot Actuator is a sub-project of Spring Boot that adds production-ready features to your application. It provides several endpoints for monitoring health, metrics, application info, environment properties, and more, which are essential for managing an application once it's deployed."
                }
            ]
        },
        {
            "name": "Spring Boot Practice Set 2",
            "questions": [
                {
                    "id": "sb_q001_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Medium",
                    "question_text": "In Spring WebFlux, what is a `Mono`?",
                    "options": [
                        "A) A reactive stream publisher that emits 0 or 1 element.",
                        "B) A reactive stream publisher that emits 0 to N elements.",
                        "C) A synchronous wrapper for a single object.",
                        "D) An annotation to indicate a method runs on a single thread."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`Mono` is a Reactive Streams `Publisher` from the Project Reactor library. It is specialized for streams containing at most one element (0..1). It's used for asynchronous operations that are expected to return a single result or nothing at all, like a typical API call."
                },
                {
                    "id": "sb_q002_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Medium",
                    "question_text": "Which dependency starter is needed to build reactive web applications with Spring Boot?",
                    "options": [
                        "A) spring-boot-starter-web",
                        "B) spring-boot-starter-reactor",
                        "C) spring-boot-starter-webflux",
                        "D) spring-boot-starter-netty"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`spring-boot-starter-webflux` is the starter for building reactive web applications using Spring WebFlux. It includes Project Reactor and, by default, uses Netty as the embedded server instead of Tomcat."
                },
                {
                    "id": "sb_q003_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Medium",
                    "question_text": "What does a 'Pointcut' expression define in AOP?",
                    "options": [
                        "A) The code that should be executed (the 'what').",
                        "B) A predicate or expression that matches the join points where advice should be executed (the 'where').",
                        "C) The order in which multiple aspects should be applied.",
                        "D) The final target object after applying advice."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A Pointcut is an expression that determines which method executions (join points) the advice should be applied to. For example, a pointcut can be defined to match all public methods in a specific package."
                },
                {
                    "id": "sb_q004_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "Which type of AOP advice can prevent a method from being executed at all?",
                    "options": [
                        "A) @Before",
                        "B) @AfterReturning",
                        "C) @AfterThrowing",
                        "D) @Around"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@Around` advice is the most powerful. It wraps around a method execution. The advice is responsible for invoking the `proceed()` method on the `ProceedingJoinPoint` to continue with the original method execution. By choosing not to call `proceed()`, the advice can effectively prevent the target method from ever being called."
                },
                {
                    "id": "sb_q005_s2",
                    "domain": "Spring Security",
                    "difficulty": "Hard",
                    "question_text": "In Spring Security, what is the role of the `PasswordEncoder`?",
                    "options": [
                        "A) To encrypt and decrypt JWT tokens.",
                        "B) To encode URL parameters to prevent injection attacks.",
                        "C) To perform a one-way transformation of a password for safe storage.",
                        "D) To encode the entire HTTP response body."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A `PasswordEncoder` is used to encode passwords before storing them in a database. It's a one-way hash function (like bcrypt) with a salt. When a user tries to log in, the provided password is encoded using the same algorithm and then compared to the stored hash. This prevents storing passwords in plaintext."
                },
                {
                    "id": "sb_q006_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "What is the role of a Discovery Server like Eureka in a microservices architecture?",
                    "options": [
                        "A) To store centralized configuration for all microservices.",
                        "B) To provide a central registry where services can register themselves and discover other services.",
                        "C) To act as a single entry point for all client requests.",
                        "D) To monitor the health and performance of all services."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A Discovery Server (Service Registry) like Netflix Eureka is a key component in microservices. Services register their network locations (IP address and port) with the server upon startup. Other services can then query the server to find the locations of the services they need to communicate with, enabling dynamic service discovery."
                },
                {
                    "id": "sb_q007_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "What is the primary function of a Spring Cloud Config Server?",
                    "options": [
                        "A) To provide a user interface for configuring Spring Boot applications.",
                        "B) To manage service discovery and registration.",
                        "C) To centralize application configuration management across different environments and services.",
                        "D) To route and filter API requests to backend services."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Cloud Config Server provides an externalized, centralized location for configuration properties for applications across all environments. It typically uses a Git repository as a backend, allowing for versioned, auditable, and managed configuration changes without redeploying services."
                },
                {
                    "id": "sb_q008_s2",
                    "domain": "Spring Caching",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to remove an entry from a cache?",
                    "options": [
                        "A) @Cacheable",
                        "B) @CacheEvict",
                        "C) @CachePut",
                        "D) @CacheRemove"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@CacheEvict` is used to signal the removal of one or more entries from a cache. It can be used to clear an entire cache region or to evict a specific entry based on a key."
                },
                {
                    "id": "sb_q009_s2",
                    "domain": "Spring Caching",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `@Cacheable` and `@CachePut`?",
                    "options": [
                        "A) `@CachePut` is for removing entries, `@Cacheable` is for adding them.",
                        "B) They are aliases for the same functionality.",
                        "C) `@Cacheable` skips the method execution if a value is in the cache, while `@CachePut` always executes the method and then updates the cache.",
                        "D) `@Cacheable` is for read operations, `@CachePut` is for write-only caches."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The key difference is method execution. `@Cacheable` checks the cache first and only executes the method if the value is not found. `@CachePut` always executes the method and then places its return value into the cache. `@CachePut` is useful for updating an object while also ensuring the cache is refreshed with the new state."
                },
                {
                    "id": "sb_q010_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What does `@DirtiesContext` do in a Spring test?",
                    "options": [
                        "A) It cleans the test database after the test method runs.",
                        "B) It indicates that the test modifies the `ApplicationContext`, which should be closed and recreated for subsequent tests.",
                        "C) It reports a test as 'dirty' or failing.",
                        "D) It clears all mocks created by Mockito."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@DirtiesContext` annotation signals that a test method or class modifies the Spring `ApplicationContext` (e.g., by changing a bean's state or replacing a bean definition). This tells the Spring TestContext Framework to close and rebuild the context after the test, ensuring that subsequent tests get a clean, unmodified context."
                },
                {
                    "id": "sb_q011_s2",
                    "domain": "Spring Messaging",
                    "difficulty": "Medium",
                    "question_text": "Which starter would you use to integrate Apache Kafka with a Spring Boot application?",
                    "options": [
                        "A) spring-boot-starter-amqp",
                        "B) spring-boot-starter-jms",
                        "C) spring-kafka",
                        "D) spring-boot-starter-kafka"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "For Kafka integration, Spring Boot provides the `spring-boot-starter-kafka` starter. This pulls in the `spring-kafka` library and provides auto-configuration for a `KafkaTemplate` and listener containers."
                },
                {
                    "id": "sb_q012_s2",
                    "domain": "Spring Messaging",
                    "difficulty": "Medium",
                    "question_text": "In Spring's messaging support, which annotation is used to create a message listener endpoint (e.g., for Kafka or RabbitMQ)?",
                    "options": [
                        "A) @MessageListener",
                        "B) @JmsListener or @KafkaListener",
                        "C) @ConsumeMessage",
                        "D) @MessageHandler"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring provides specific listener annotations for different messaging technologies. For JMS, you use `@JmsListener`. For Kafka, you use `@KafkaListener`. For RabbitMQ, you use `@RabbitListener`. These annotations mark a method as a target for incoming messages from a specific queue or topic."
                },
                {
                    "id": "sb_q013_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of a `FailureAnalyzer` in Spring Boot?",
                    "options": [
                        "A) To analyze and report on test failures.",
                        "B) To provide detailed diagnostics and a human-readable description for common application startup failures.",
                        "C) To analyze code for potential runtime failures.",
                        "D) To trigger a failover to a backup system when the application fails."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`FailureAnalyzer` is a feature that intercepts exceptions during application startup and tries to provide a friendly, detailed error message and a suggested action to fix the problem. For example, if port 8080 is already in use, it will provide a specific `PortInUseException` analysis instead of a generic startup error."
                },
                {
                    "id": "sb_q014_s2",
                    "domain": "Spring Core",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between a 'prototype' and a 'request' bean scope?",
                    "options": [
                        "A) There is no difference; they are aliases.",
                        "B) 'Prototype' creates a new bean every time it's requested, while 'request' creates one bean per HTTP request, which is reused within that request.",
                        "C) 'Request' scope is for web applications, while 'prototype' is for standalone applications.",
                        "D) 'Prototype' beans are not managed by the Spring container after creation, while 'request' beans are."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A 'prototype' scoped bean results in a new instance every single time a request for that bean is made. A 'request' scoped bean creates a single instance for the lifecycle of a single HTTP request. If the same bean is requested multiple times within the same HTTP request, the same instance is returned."
                },
                {
                    "id": "sb_q015_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Hard",
                    "question_text": "What is the N+1 selects problem in JPA/Hibernate, and how can it be solved?",
                    "options": [
                        "A) It's a security vulnerability; it's solved by using prepared statements.",
                        "B) It's a performance issue where fetching N entities results in N+1 database queries; it's solved using `JOIN FETCH` or Entity Graphs.",
                        "C) It's a connection pool issue where you request N+1 connections; it's solved by increasing pool size.",
                        "D) It's when N+1 transactions are created for a single operation; it's solved with `@Transactional`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The N+1 selects problem occurs when you fetch a list of parent entities (1 query) and then lazily access a child collection for each parent, resulting in N additional queries. This is highly inefficient. It can be solved by telling JPA to fetch the associated entities eagerly in the initial query, using a `JOIN FETCH` clause in a JPQL query or by defining a `@NamedEntityGraph`."
                },
                {
                    "id": "sb_q016_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Medium",
                    "question_text": "What is the non-blocking, reactive alternative to `RestTemplate` provided by Spring for making client-side HTTP requests?",
                    "options": [
                        "A) `AsyncRestTemplate`",
                        "B) `ReactiveClient`",
                        "C) `WebClient`",
                        "D) `FluxClient`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`WebClient` is the reactive, non-blocking alternative to the traditional `RestTemplate`. It is part of the Spring WebFlux module and is the recommended way to perform HTTP requests in a reactive application."
                },
                {
                    "id": "sb_q017_s2",
                    "domain": "Spring Security",
                    "difficulty": "Medium",
                    "question_text": "What does CORS stand for, and how can you enable it in a Spring Boot controller?",
                    "options": [
                        "A) Cross-Origin Resource Sharing; enabled with the `@CrossOrigin` annotation.",
                        "B) Centralized Object Request Service; enabled with `@CORSConfiguration`.",
                        "C) Cross-Object Reference System; enabled by setting `security.cors.enabled=true`.",
                        "D) Controlled Origin Resource Security; enabled by implementing the `CORS` interface."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "CORS stands for Cross-Origin Resource Sharing. It's a browser security mechanism that restricts cross-origin HTTP requests. In Spring, you can easily enable CORS for a specific controller or method by adding the `@CrossOrigin` annotation. Global CORS configuration can also be defined in a `WebMvcConfigurer` bean."
                },
                {
                    "id": "sb_q018_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "How can you create a custom health indicator for the Spring Boot Actuator `/health` endpoint?",
                    "options": [
                        "A) By creating a class that implements the `HealthCheck` interface and annotating it with `@Component`.",
                        "B) By sending a POST request to `/health/custom` with the health details.",
                        "C) By creating a class that implements the `HealthIndicator` interface and registering it as a Spring bean.",
                        "D) By extending `AbstractHealthIndicator` and adding it to the `health.indicators` property."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "To add a custom health check, you create a Spring bean (`@Component`) that implements the `HealthIndicator` interface. This interface has a single method, `health()`, where you implement your custom logic and return a `Health` object with a status (UP, DOWN, etc.) and optional details."
                },
                {
                    "id": "sb_q019_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "Which Spring Cloud component provides client-side load balancing?",
                    "options": [
                        "A) Spring Cloud Gateway",
                        "B) Spring Cloud LoadBalancer",
                        "C) Eureka",
                        "D) Hystrix"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Cloud LoadBalancer provides client-side load balancing capabilities. When a client (like `RestTemplate` or `WebClient` configured with it) makes a request to a logical service name (e.g., 'user-service'), the load balancer intercepts the request, gets a list of available instances from a discovery server like Eureka, and chooses one to send the request to."
                },
                {
                    "id": "sb_q020_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Query` annotation in a Spring Data repository?",
                    "options": [
                        "A) To define a derived query method using a specific naming convention.",
                        "B) To provide a custom JPQL or native SQL query for a repository method.",
                        "C) To query the application context for available beans.",
                        "D) To specify the query parameters for a REST endpoint."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "While Spring Data's derived query methods are powerful, they can't handle all scenarios. The `@Query` annotation allows you to define a custom query using either Java Persistence Query Language (JPQL) or native SQL, giving you full control over the database query."
                },
                {
                    "id": "sb_q021_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "When writing a test with `@SpringBootTest`, how can you specify a different active profile for the test run?",
                    "options": [
                        "A) By creating a separate `application-test.properties` file.",
                        "B) Using the `@ActiveProfiles(\"test\")` annotation on the test class.",
                        "C) It automatically uses the 'test' profile.",
                        "D) You cannot change the profile for a test."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@ActiveProfiles` annotation is part of the Spring Test module and is used to declare which bean definition profiles should be active when loading the `ApplicationContext` for a test. For example, `@ActiveProfiles(\"test\")` will activate the 'test' profile, causing Spring to load `application-test.properties`."
                },
                {
                    "id": "sb_q022_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Value` annotation?",
                    "options": [
                        "A) To provide a default value for a method parameter.",
                        "B) To inject values from properties files, environment variables, or other sources into fields.",
                        "C) To define the value of a bean's property in XML configuration.",
                        "D) To specify the return value of a mocked method."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@Value` annotation is a core Spring feature used to inject values into components. It can read from property files (`@Value(\"${app.name}\")`), evaluate Spring Expression Language (SpEL) expressions (`@Value(\"#{'Hello' + ' World'}\")`), or inject literal values."
                },
                {
                    "id": "sb_q023_s2",
                    "domain": "Spring Security",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of a `SecurityFilterChain` bean in modern Spring Security configuration?",
                    "options": [
                        "A) It is an older, deprecated way of configuring security.",
                        "B) It defines a filter chain that is applied to a set of HTTP requests, containing rules for authorization, login, logout, etc.",
                        "C) It is a chain of custom filters for manipulating JWTs.",
                        "D) It filters out sensitive information from logs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Since Spring Security 5.7, the recommended way to configure web security is by defining one or more `SecurityFilterChain` beans. Each bean defines a self-contained set of security rules (like which requests to permit, which to authenticate, form login configuration, etc.) that are matched to HTTP requests, replacing the older `WebSecurityConfigurerAdapter`."
                },
                {
                    "id": "sb_q024_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Medium",
                    "question_text": "In Spring WebFlux, what is a `Flux`?",
                    "options": [
                        "A) A reactive stream publisher that emits 0 or 1 element.",
                        "B) A reactive stream publisher that emits 0 to N elements.",
                        "C) A utility for flushing the response stream.",
                        "D) A configuration class for reactive settings."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`Flux` is a Reactive Streams `Publisher` from Project Reactor. It is specialized for streams containing 0 to many elements (0..N). It is used for asynchronous operations that are expected to return multiple results over time, like a list of items from a database or a stream of events."
                },
                {
                    "id": "sb_q025_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is a `Banner` in Spring Boot?",
                    "options": [
                        "A) A pop-up notification in a web application.",
                        "B) A required license file for deployment.",
                        "C) The text or ASCII art that is printed to the console on application startup.",
                        "D) A component for managing feature flags."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The banner is the text/art displayed when a Spring Boot application starts up. By default, it shows the Spring logo and version. You can customize this by adding a `banner.txt` file to your classpath or by disabling it completely with `spring.main.banner-mode=off`."
                },
                {
                    "id": "sb_q026_s2",
                    "domain": "Spring Core",
                    "difficulty": "Hard",
                    "question_text": "What is Spring Expression Language (SpEL)?",
                    "options": [
                        "A) A templating language for creating dynamic web pages.",
                        "B) A powerful expression language that supports querying and manipulating an object graph at runtime.",
                        "C) A domain-specific language for defining database queries.",
                        "D) A language for writing build scripts for Spring projects."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "SpEL is a powerful expression language used across the Spring portfolio. It can be used for configuration (e.g., in `@Value` or `@ConditionalOnExpression` annotations) to perform dynamic computations, access bean properties, invoke methods, and more, all at runtime."
                },
                {
                    "id": "sb_q027_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to specify how a primary key should be generated (e.g., auto-increment, sequence)?",
                    "options": [
                        "A) @IdGenerator",
                        "B) @GeneratedValue",
                        "C) @AutoIncrement",
                        "D) @KeyStrategy"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@GeneratedValue` annotation is used in conjunction with `@Id`. It specifies the generation strategy for the primary key values. Common strategies include `GenerationType.IDENTITY` (auto-increment column), `GenerationType.SEQUENCE` (database sequence), and `GenerationType.AUTO` (let the persistence provider choose)."
                },
                {
                    "id": "sb_q028_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of Spring Cloud Gateway?",
                    "options": [
                        "A) It is a library for secure data transfer between microservices.",
                        "B) It provides a way to build reactive, non-blocking API gateways.",
                        "C) It is a server for storing centralized configuration.",
                        "D) It is a service registry for microservices."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Cloud Gateway is a project that provides a library for building API Gateways on top of Spring WebFlux. An API Gateway is a single entry point for all client requests, and it can handle concerns like routing, security, rate limiting, and request/response modification before forwarding the request to the appropriate downstream microservice."
                },
                {
                    "id": "sb_q029_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Actuator endpoint provides details about the application's request mappings (i.e., all the @RequestMapping paths)?",
                    "options": [
                        "A) /routes",
                        "B) /endpoints",
                        "C) /mappings",
                        "D) /paths"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `/mappings` endpoint provides detailed information about all of the application's request mappings, including the handler method, its controller class, and details about the mapping itself, such as supported HTTP methods and media types."
                },
                {
                    "id": "sb_q030_s2",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Lazy` annotation?",
                    "options": [
                        "A) To make a method execution asynchronous.",
                        "B) To indicate that a bean should not be initialized until it is first requested.",
                        "C) To mark a test to be run last.",
                        "D) To specify a lazy-loading strategy for a JPA entity."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, singleton beans are created eagerly when the application context starts. The `@Lazy` annotation can be placed on a `@Bean` definition or a `@Component` class to indicate that the bean should be initialized lazily. The bean will only be created when it is first requested from the container."
                },
                {
                    "id": "sb_q031_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "Which starter dependency is required to use Aspect-Oriented Programming in a Spring Boot web application?",
                    "options": [
                        "A) spring-boot-starter-aop",
                        "B) It is included by default in spring-boot-starter-web.",
                        "C) It is included by default in spring-boot-starter.",
                        "D) Both B and C are correct."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The `spring-boot-starter-aop` dependency is actually included as a transitive dependency in starters like `spring-boot-starter-web`. The base `spring-boot-starter` also includes it. Therefore, if you are building almost any type of Spring Boot application, you already have AOP capabilities available."
                },
                {
                    "id": "sb_q032_s2",
                    "domain": "Spring Security",
                    "difficulty": "Hard",
                    "question_text": "What is method security in Spring Security and how is it typically enabled?",
                    "options": [
                        "A) It secures methods from being decompiled; enabled with `@Secure`.",
                        "B) It allows securing method invocations using annotations like `@PreAuthorize`; enabled with `@EnableMethodSecurity`.",
                        "C) It is a way to secure database methods; enabled by default with JPA.",
                        "D) It is a way to secure HTTP methods (GET, POST); enabled in the `SecurityFilterChain`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Method security allows you to apply authorization rules directly to your service layer methods. You can use annotations like `@PreAuthorize(\"hasRole('ADMIN')\")` to ensure only users with the 'ADMIN' role can execute a specific method. This is enabled by adding `@EnableMethodSecurity` to a `@Configuration` class."
                },
                {
                    "id": "sb_q033_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "What is the order of precedence for property sources in Spring Boot (from lowest to highest)?",
                    "options": [
                        "A) Command line args, application.properties, environment variables",
                        "B) application.properties, environment variables, command line args",
                        "C) Environment variables, command line args, application.properties",
                        "D) application.properties, command line args, environment variables"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot has a very specific property override order. A simplified but key part of this order is: properties from `application.properties` (lowest precedence), then OS environment variables, and finally command-line arguments (highest precedence). This allows for flexible configuration overrides in different environments."
                },
                {
                    "id": "sb_q034_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Hard",
                    "question_text": "What is 'backpressure' in the context of reactive streams?",
                    "options": [
                        "A) A mechanism for the publisher to slow down if the subscriber is too fast.",
                        "B) A mechanism for the subscriber to signal to the publisher how much data it can handle, preventing it from being overwhelmed.",
                        "C) A network protocol for ensuring guaranteed message delivery.",
                        "D) An error condition when the reactive stream is broken."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Backpressure is a core concept in reactive programming. It is a form of flow control where the consumer (subscriber) can signal to the producer (publisher) how many items it is ready to process. This prevents the producer from sending data faster than the consumer can handle, which would otherwise lead to resource exhaustion or buffer overflows."
                },
                {
                    "id": "sb_q035_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring-boot-maven-plugin`?",
                    "options": [
                        "A) To manage project dependencies.",
                        "B) To compile Java source code into bytecode.",
                        "C) To package the application into an executable JAR or WAR and to run the application.",
                        "D) To generate project scaffolding from a template."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `spring-boot-maven-plugin` is essential for Spring Boot projects using Maven. Its `repackage` goal creates a single, executable 'fat JAR' that includes all of the project's dependencies. It also provides a `run` goal to easily start the application from the command line."
                },
                {
                    "id": "sb_q036_s2",
                    "domain": "Spring Data",
                    "difficulty": "Medium",
                    "question_text": "Besides Spring Data JPA, what is another popular Spring Data project for working with NoSQL databases like MongoDB?",
                    "options": [
                        "A) Spring Data JDBC",
                        "B) Spring Data REST",
                        "C) Spring Data MongoDB",
                        "D) Spring Data Cassandra"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The Spring Data project provides a consistent programming model for various persistence stores. `Spring Data MongoDB` is the specific module for integrating with MongoDB, providing a `MongoRepository` interface and a `MongoTemplate` for a familiar, high-level abstraction."
                },
                {
                    "id": "sb_q037_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which testing library is included by `spring-boot-starter-test` for writing fluent, readable assertions?",
                    "options": [
                        "A) Hamcrest",
                        "B) JUnit Asserts",
                        "C) AssertJ",
                        "D) TestNG"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot starter test includes AssertJ as its default assertion library. AssertJ provides a rich set of assertions and a fluent API that leads to more readable and maintainable test code, for example: `assertThat(user.getName()).isEqualTo(\"Frodo\");`."
                },
                {
                    "id": "sb_q038_s2",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "What is the role of an `ApplicationContext` in a Spring application?",
                    "options": [
                        "A) It is the security context for the current user.",
                        "B) It is a configuration file for application properties.",
                        "C) It is the central interface that provides configuration for an application and manages the lifecycle of beans.",
                        "D) It is a context path for the deployed web application."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `ApplicationContext` is the core of the Spring Framework. It is the IoC container that is responsible for instantiating, configuring, and assembling beans. It reads configuration metadata (from Java annotations or XML) and manages the complete lifecycle of the beans it creates."
                },
                {
                    "id": "sb_q039_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "How do you specify the context path for your Spring Boot web application in `application.properties`?",
                    "options": [
                        "A) spring.mvc.context-path=/api",
                        "B) server.servlet.context-path=/api",
                        "C) app.context-path=/api",
                        "D) spring.application.path=/api"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "To set a base path for all your application's endpoints, you can configure the servlet context path using the `server.servlet.context-path` property. For example, `server.servlet.context-path=/myapp` would make your endpoints available under `/myapp/...`."
                },
                {
                    "id": "sb_q040_s2",
                    "domain": "Spring MVC",
                    "difficulty": "Hard",
                    "question_text": "What is an `HttpMessageConverter` in Spring MVC?",
                    "options": [
                        "A) A component that converts HTTP methods, e.g., GET to POST.",
                        "B) A strategy interface for converting from and to HTTP requests and responses.",
                        "C) A utility for converting an `HttpServletRequest` to a `ResponseEntity`.",
                        "D) An annotation for converting message formats."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An `HttpMessageConverter` is responsible for converting the body of an HTTP request into a Java object (for `@RequestBody`) and converting a Java object into the body of an HTTP response (for `@ResponseBody`). Spring Boot auto-configures several, like `MappingJackson2HttpMessageConverter` for handling JSON."
                },
                {
                    "id": "sb_q041_s2",
                    "domain": "Spring Data",
                    "difficulty": "Hard",
                    "question_text": "What is Spring Data REST?",
                    "options": [
                        "A) A library for testing RESTful services.",
                        "B) A project that automatically exposes REST endpoints on top of your Spring Data repositories.",
                        "C) A reactive implementation of the REST architectural style.",
                        "D) A specification for building RESTful APIs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Data REST is a powerful project that inspects your Spring Data repositories and automatically exposes them as HATEOAS-compliant RESTful endpoints. It can significantly reduce boilerplate code for creating basic CRUD APIs."
                },
                {
                    "id": "sb_q042_s2",
                    "domain": "Spring Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `ApplicationEvent` mechanism in Spring?",
                    "options": [
                        "A) To handle low-level operating system events.",
                        "B) To provide a publish-subscribe model for loosely coupled communication between application components.",
                        "C) To log application errors and exceptions.",
                        "D) To manage the lifecycle events of a bean (creation, destruction)."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring's `ApplicationEvent` system provides an Observer pattern implementation. Components can publish custom events, and other components (`ApplicationListener`s) can subscribe to these events without the publisher and listener having direct knowledge of each other, promoting loose coupling."
                },
                {
                    "id": "sb_q043_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which property can you set to change the base path for all Actuator endpoints?",
                    "options": [
                        "A) management.server.base-path=/manage",
                        "B) spring.actuator.path=/manage",
                        "C) endpoints.actuator.path=/manage",
                        "D) management.endpoints.web.base-path=/manage"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "By default, Actuator endpoints are served under the `/actuator` path. You can change this base path by setting the `management.endpoints.web.base-path` property. For example, setting it to `/management` would make the health endpoint available at `/management/health`."
                },
                {
                    "id": "sb_q044_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `@MockBean` and `@Mock`?",
                    "options": [
                        "A) `@Mock` is from Mockito, while `@MockBean` is from Spring Boot; `@MockBean` adds the mock to the ApplicationContext.",
                        "B) `@MockBean` can only be used in `@WebMvcTest`, while `@Mock` can be used anywhere.",
                        "C) They are functionally identical.",
                        "D) `@Mock` creates a real object with mocked behavior, while `@MockBean` creates a pure mock."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`@Mock` is a pure Mockito annotation used for creating a mock object that you must manage and inject yourself. `@MockBean` is a Spring Boot annotation that not only creates a Mockito mock but also registers it as a bean in the Spring `ApplicationContext`, replacing any existing bean of the same type. This is crucial for Spring integration tests."
                },
                {
                    "id": "sb_q045_s2",
                    "domain": "Spring Security",
                    "difficulty": "Medium",
                    "question_text": "In the context of Spring Security and OAuth2, what is a `JwtDecoder`?",
                    "options": [
                        "A) A component that generates new JWTs for authenticated users.",
                        "B) A component responsible for validating the signature and claims of an incoming JWT.",
                        "C) A UI component for displaying the contents of a JWT.",
                        "D) A filter that decodes base64-encoded JWTs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When a Spring Boot application is configured as a Resource Server, it needs to validate incoming JWTs (JSON Web Tokens). A `JwtDecoder` is the component responsible for this task. It typically checks the token's signature against a known key, validates the issuer and audience claims, and checks the expiration time."
                },
                {
                    "id": "sb_q046_s2",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `HandlerExceptionResolver`?",
                    "options": [
                        "A) It resolves which handler method to invoke for a given request.",
                        "B) It is a strategy for resolving exceptions that occur during request processing, allowing for custom error responses.",
                        "C) It resolves and injects dependencies into exception classes.",
                        "D) It is an AOP advice for handling exceptions."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`HandlerExceptionResolver` is a core interface in Spring MVC's exception handling mechanism. Implementations of this interface can inspect an exception thrown by a handler and map it to a specific `ModelAndView`, which could render an error page or produce a structured JSON error response. `@ControllerAdvice` provides a higher-level abstraction over this."
                },
                {
                    "id": "sb_q047_s2",
                    "domain": "Spring Core",
                    "difficulty": "Hard",
                    "question_text": "What are Bean Definition Profiles?",
                    "options": [
                        "A) User profiles for application personalization.",
                        "B) Performance profiles for monitoring bean creation time.",
                        "C) A mechanism for segregating bean definitions into different groups, allowing for their selective registration based on the active environment.",
                        "D) XML files that define Spring beans."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Bean definition profiles (activated via `@Profile` annotation or XML) allow you to register different sets of beans for different environments. For example, you can have a 'dev' profile that configures an in-memory database and a 'prod' profile that configures a connection to a production PostgreSQL database."
                },
                {
                    "id": "sb_q048_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "How can you implement custom validation logic on a `@ConfigurationProperties` class?",
                    "options": [
                        "A) By implementing the `Validator` interface in the same class.",
                        "B) It is not possible to validate configuration properties.",
                        "C) By adding JSR-303 (e.g., `@NotNull`, `@Min`) validation annotations to the fields and annotating the class with `@Validated`.",
                        "D) By creating a separate validation configuration file."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot allows you to validate your custom configuration properties. You can add standard JSR-303 validation annotations (like `@NotEmpty`, `@URL`, `@Min`, `@Max`) to the fields of your `@ConfigurationProperties` class. To trigger the validation, you must also add the `@Validated` annotation to the class."
                },
                {
                    "id": "sb_q049_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "Which interface can a component implement to get access to the `ApplicationContext` it runs in?",
                    "options": [
                        "A) BeanFactoryAware",
                        "B) ServletContextAware",
                        "C) ApplicationContextAware",
                        "D) EnvironmentAware"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "By implementing the `ApplicationContextAware` interface, a bean can get a reference to the `ApplicationContext` that created it. This is a form of 'aware' interface that provides a callback mechanism for injecting framework dependencies. While useful, it couples the component to the Spring framework and is often avoided in favor of direct dependency injection."
                },
                {
                    "id": "sb_q050_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Hard",
                    "question_text": "What is a 'projection' in Spring Data JPA?",
                    "options": [
                        "A) A way to project data onto a different coordinate system.",
                        "B) A feature that allows you to only retrieve a subset of columns from a database table instead of the entire entity.",
                        "C) The process of projecting an entity into a DTO.",
                        "D) A tool for predicting future data trends based on current data."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Projections are used to limit the data retrieved from a query to only the fields you actually need. This can improve performance by reducing network traffic and the amount of data Hibernate has to map. You can create projections using interfaces or DTO classes, and Spring Data will automatically implement the query to fetch only the specified fields."
                },
                {
                    "id": "sb_q051_s2",
                    "domain": "Spring WebFlux",
                    "difficulty": "Medium",
                    "question_text": "What is the default embedded server used by `spring-boot-starter-webflux`?",
                    "options": [
                        "A) Tomcat",
                        "B) Jetty",
                        "C) Undertow",
                        "D) Netty"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "While `spring-boot-starter-web` defaults to Tomcat, the reactive `spring-boot-starter-webflux` defaults to Netty. Netty is an asynchronous, event-driven network application framework, which makes it an excellent choice for building reactive, non-blocking servers."
                },
                {
                    "id": "sb_q052_s2",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to bind request parameters to a method parameter in a controller?",
                    "options": [
                        "A) @PathVariable",
                        "B) @RequestBody",
                        "C) @RequestParam",
                        "D) @RequestHeader"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@RequestParam` is used to extract query parameters (e.g., `?name=John`), form parameters, and even parts of a multipart request. For a request to `/users?name=John`, you would use `@RequestParam(\"name\") String name` in the method signature."
                },
                {
                    "id": "sb_q053_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "What is the Circuit Breaker pattern and which popular library is often used with Spring for this?",
                    "options": [
                        "A) A security pattern to break connections from malicious IPs; often implemented with Fail2Ban.",
                        "B) A pattern to prevent a network failure from cascading to other services by stopping requests to a failing service; often implemented with Resilience4j.",
                        "C) A database pattern to break long-running queries; implemented with transaction timeouts.",
                        "D) A design pattern for breaking monolithic applications into microservices; implemented with Spring Boot."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The Circuit Breaker pattern is a critical pattern for building resilient microservices. It wraps a protected function call in a circuit breaker object, which monitors for failures. If failures reach a certain threshold, the breaker 'opens', and subsequent calls automatically fail without calling the protected function. Spring Cloud Circuit Breaker provides an abstraction over implementations like Resilience4j (the current recommendation) or the older Netflix Hystrix."
                },
                {
                    "id": "sb_q054_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring.factories` file?",
                    "options": [
                        "A) It is a replacement for `application.properties` in older Spring versions.",
                        "B) It is a file that contains factory methods for creating beans.",
                        "C) It is a mechanism for libraries to register components like auto-configurations or failure analyzers with a Spring Boot application.",
                        "D) It is a file that lists all dependencies for a project."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `META-INF/spring.factories` file is a key part of Spring Boot's auto-configuration mechanism. External jars can contain this file to tell a Spring Boot application which `@Configuration` classes it should consider for auto-configuration. Spring Boot reads all `spring.factories` files on the classpath at startup to discover potential configurations."
                },
                {
                    "id": "sb_q055_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to declare a class as an aspect?",
                    "options": [
                        "A) @Advice",
                        "B) @Pointcut",
                        "C) @Component",
                        "D) @Aspect"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "To create an aspect, you define a regular Java class and annotate it with `@Aspect`. This annotation marks it as an aspect and makes it available to the Spring AOP framework for proxying. You also typically annotate it with `@Component` so it gets picked up by component scanning."
                },
                {
                    "id": "sb_q056_s2",
                    "domain": "Spring Messaging",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of a `RabbitTemplate` in Spring AMQP?",
                    "options": [
                        "A) To define a template for RabbitMQ queue and exchange creation.",
                        "B) To listen for incoming messages from a RabbitMQ queue.",
                        "C) To provide a high-level abstraction for sending and receiving messages with RabbitMQ.",
                        "D) To configure the connection to a RabbitMQ server."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`RabbitTemplate` is a central component in Spring's support for RabbitMQ. It simplifies the process of sending messages to exchanges and receiving messages from queues, handling resource management and converting objects to and from messages."
                },
                {
                    "id": "sb_q057_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between `save()` and `saveAndFlush()` in `JpaRepository`?",
                    "options": [
                        "A) There is no difference, they are aliases.",
                        "B) `save()` caches the entity in the persistence context, while `saveAndFlush()` immediately synchronizes the changes to the database.",
                        "C) `save()` is for new entities, while `saveAndFlush()` is for updating existing ones.",
                        "D) `saveAndFlush()` is asynchronous, while `save()` is synchronous."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`save()` makes the given entity managed within the current transaction's persistence context. The changes might not be sent to the database until the transaction commits or the context is flushed. `saveAndFlush()` does the same but also forces a flush of the persistence context, immediately executing the necessary SQL INSERT/UPDATE statements."
                },
                {
                    "id": "sb_q058_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "Which annotation can be used to create a conditional bean that is only registered if another specific bean is present in the context?",
                    "options": [
                        "A) @ConditionalOnClass",
                        "B) @ConditionalOnBean",
                        "C) @ConditionalOnProperty",
                        "D) @ConditionalOnMissingBean"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ConditionalOnBean` is a conditional annotation that allows a bean to be included only if a bean of a specified type or name already exists in the `ApplicationContext`. This is very useful in auto-configuration classes to configure components that depend on others."
                },
                {
                    "id": "sb_q059_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Medium",
                    "question_text": "What is the `spring-boot-starter-parent` used for in a Maven `pom.xml`?",
                    "options": [
                        "A) It is the main dependency for all Spring Boot applications.",
                        "B) It provides useful Maven defaults and a dependency-management section to manage dependency versions.",
                        "C) It defines the parent class for the main application class.",
                        "D) It is used to enable parental controls in a web application."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `spring-boot-starter-parent` provides several key benefits. It sets default Java compiler levels, plugin configurations, and most importantly, it includes a `<dependencyManagement>` section that manages the versions of common dependencies. This allows you to omit `<version>` tags for those dependencies in your own POM."
                },
                {
                    "id": "sb_q060_s2",
                    "domain": "Spring MVC",
                    "difficulty": "Medium",
                    "question_text": "How do you handle file uploads in a Spring Boot REST controller?",
                    "options": [
                        "A) By using `@RequestParam(\"file\") MultipartFile file` as a method parameter.",
                        "B) By reading the `InputStream` from the `HttpServletRequest` manually.",
                        "C) By using `@RequestBody byte[] file` to get the raw file bytes.",
                        "D) File uploads must be handled by a separate, dedicated servlet."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Spring MVC provides built-in support for multipart (file upload) requests. The easiest way to handle an upload is to declare a method parameter of type `MultipartFile`, annotated with `@RequestParam`. Spring will automatically bind the uploaded file data to this parameter."
                },
                {
                    "id": "sb_q061_s2",
                    "domain": "Spring Data JPA",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@EntityGraph` annotation?",
                    "options": [
                        "A) To generate a graph diagram of entity relationships.",
                        "B) To define a template for fetching a graph of associated entities, used to solve the N+1 problem.",
                        "C) To specify a graph database to be used with the entity.",
                        "D) To visualize the application context as a graph."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An `@EntityGraph` provides a way to define a plan for fetching an entity and its specified associations. It can be used with repository find methods to override the default fetch plan (e.g., lazy loading) and eagerly load parts of the object graph, which is an alternative to using `JOIN FETCH` for performance optimization."
                },
                {
                    "id": "sb_q062_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "Which annotation can be used to create a conditional bean that is only registered if a specific property has a certain value?",
                    "options": [
                        "A) @ConditionalOnClass",
                        "B) @ConditionalOnBean",
                        "C) @ConditionalOnProperty",
                        "D) @ConditionalOnExpression"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@ConditionalOnProperty` is a very useful conditional annotation. It allows a bean to be registered only if a specific property exists in the environment and optionally has a specific value. For example, `@ConditionalOnProperty(name = \"feature.toggle.new-api\", havingValue = \"true\")`."
                },
                {
                    "id": "sb_q063_s2",
                    "domain": "Spring Core",
                    "difficulty": "Easy",
                    "question_text": "Which of these is NOT a core module of the Spring Framework?",
                    "options": [
                        "A) Core Container",
                        "B) Data Access/Integration",
                        "C) Web",
                        "D) Swing GUI"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The Spring Framework is organized into several modules. The Core Container (Beans, Core, Context, SpEL), Data Access/Integration (JDBC, ORM, JMS, Transactions), and Web (MVC, WebSocket, WebFlux) are all core parts of Spring. Spring does not have a module for building Swing-based desktop GUIs."
                },
                {
                    "id": "sb_q064_s2",
                    "domain": "Spring Boot Core Concepts",
                    "difficulty": "Hard",
                    "question_text": "What is a 'fat JAR' (or 'uber JAR') in the context of Spring Boot?",
                    "options": [
                        "A) A JAR file that is larger than 100MB.",
                        "B) A JAR file that contains only the application's compiled code, without dependencies.",
                        "C) A single, executable JAR file that contains the application's compiled code along with all of its dependencies embedded within it.",
                        "D) A JAR file that has been optimized for size."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A 'fat JAR' is the default packaging for a Spring Boot application. It is a self-contained, executable archive that includes your application's classes and resources, as well as all the libraries that your application depends on. This makes deployment as simple as `java -jar myapp.jar`."
                },
                {
                    "id": "sb_q065_s2",
                    "domain": "Spring Security",
                    "difficulty": "Easy",
                    "question_text": "After adding `spring-boot-starter-security`, what happens to your application's endpoints by default?",
                    "options": [
                        "A) Nothing changes.",
                        "B) All endpoints become publicly accessible.",
                        "C) All endpoints are secured and require authentication.",
                        "D) Only POST endpoints are secured."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "One of the key features of Spring Boot's security auto-configuration is that it immediately secures all HTTP endpoints by default. It adds HTTP Basic authentication and generates a login page for form-based login, requiring a valid user to access any part of the application."
                }
            ]
        },
        {
            "name": "Spring Boot Practice Set 3",
            "questions": [
                {
                    "id": "d1_q001_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "What is the primary annotation used to enable all of Spring Boot's auto-configuration, component scanning, and configuration properties features?",
                    "options": [
                        "A) @EnableAutoConfiguration",
                        "B) @ComponentScan",
                        "C) @Configuration",
                        "D) @SpringBootApplication"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "@SpringBootApplication is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan with their default attributes."
                },
                {
                    "id": "d1_q002_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "Which file is the most common place to configure properties for a Spring Boot application?",
                    "options": [
                        "A) web.xml",
                        "B) application.properties or application.yml",
                        "C) pom.xml",
                        "D) settings.gradle"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot automatically loads properties from application.properties or application.yml files located in the classpath."
                },
                {
                    "id": "d1_q003_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to mark a class as a REST controller in Spring MVC?",
                    "options": [
                        "A) @Controller",
                        "B) @Service",
                        "C) @RestController",
                        "D) @Repository"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "@RestController is a specialized version of @Controller that adds @Controller and @ResponseBody annotations, simplifying RESTful web service creation."
                },
                {
                    "id": "d1_q004_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How can you access a property named 'app.version' from application.properties in a Spring component?",
                    "options": [
                        "A) Using @Property('app.version')",
                        "B) Using @Value(\"${app.version}\")",
                        "C) Using @Inject(\"app.version\")",
                        "D) Using @GetProperty(\"app.version\")"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The @Value annotation is used to inject values into fields in Spring-managed beans. The ${...} syntax is used to reference property keys."
                },
                {
                    "id": "d1_q005_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which Spring Boot Starter would you use to add support for database interactions using JPA?",
                    "options": [
                        "A) spring-boot-starter-web",
                        "B) spring-boot-starter-jdbc",
                        "C) spring-boot-starter-data-jpa",
                        "D) spring-boot-starter-data-rest"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "spring-boot-starter-data-jpa provides all necessary dependencies for working with JPA and a JPA provider like Hibernate."
                },
                {
                    "id": "d1_q006_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Easy",
                    "question_text": "What is the primary purpose of Spring Boot Actuator?",
                    "options": [
                        "A) To secure the application",
                        "B) To provide production-ready features like monitoring and metrics",
                        "C) To manage database transactions",
                        "D) To build the user interface"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot Actuator exposes operational information about the running application—health, metrics, info, dump, env, etc. via HTTP endpoints or JMX."
                },
                {
                    "id": "d1_q007_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What does the term 'opinionated' mean in the context of Spring Boot?",
                    "options": [
                        "A) The framework is very rigid and cannot be changed.",
                        "B) The framework has strong feelings about politics.",
                        "C) The framework makes assumptions and provides sensible defaults to speed up development.",
                        "D) The framework requires developers to vote on new features."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "'Opinionated' means Spring Boot has a preferred way of doing things (e.g., using Tomcat, Jackson for JSON) but allows developers to override these defaults if needed."
                },
                {
                    "id": "d1_q008_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which annotation maps an HTTP GET request to a specific handler method?",
                    "options": [
                        "A) @PostMapping",
                        "B) @RequestMapping(method = RequestMethod.GET)",
                        "C) @GetMapping",
                        "D) Both B and C"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "@GetMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.GET)."
                },
                {
                    "id": "d1_q009_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "In Spring Data JPA, which interface do you typically extend to get basic CRUD functionality for an entity?",
                    "options": [
                        "A) Repository",
                        "B) CrudRepository",
                        "C) JpaRepository",
                        "D) Dao"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "JpaRepository extends PagingAndSortingRepository, which in turn extends CrudRepository. JpaRepository provides JPA-specific methods like flushing and batching and is the most common choice."
                },
                {
                    "id": "d1_q010_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to load a full Spring application context for an integration test?",
                    "options": [
                        "A) @WebMvcTest",
                        "B) @DataJpaTest",
                        "C) @SpringBootTest",
                        "D) @ContextConfiguration"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "@SpringBootTest is the main test annotation for Spring Boot applications. It starts the embedded server and creates the full ApplicationContext."
                },
                {
                    "id": "d1_q011_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "What is a 'Spring Boot Starter'?",
                    "options": [
                        "A) A project generation wizard.",
                        "B) A main class for a Spring application.",
                        "C) A set of convenient dependency descriptors to include in your application.",
                        "D) A command-line tool for running Spring Boot apps."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Starters are a set of dependency descriptors that simplify your build configuration. For example, 'spring-boot-starter-web' includes all dependencies for building a web application with Spring MVC."
                },
                {
                    "id": "d1_q012_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How do you enable a specific profile, say 'prod', for a Spring Boot application?",
                    "options": [
                        "A) By creating a file named 'application-prod.properties'",
                        "B) By setting the 'spring.profiles.active=prod' property",
                        "C) By using the @Profile(\"prod\") annotation on a @Configuration class",
                        "D) All of the above"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "While creating profile-specific property files (A) and using @Profile (C) are part of using profiles, the profile itself is activated by setting the 'spring.profiles.active' property, typically via environment variables, command-line arguments, or in the main application.properties file."
                },
                {
                    "id": "d1_q013_s1",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "Which starter dependency is required to add basic security to a Spring Boot web application?",
                    "options": [
                        "A) spring-boot-starter-security",
                        "B) spring-boot-starter-web-services",
                        "C) spring-boot-starter-actuator",
                        "D) spring-boot-starter-oauth2-client"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The 'spring-boot-starter-security' dependency includes Spring Security, which auto-configures security features like a login page and basic authentication for all HTTP endpoints."
                },
                {
                    "id": "d1_q014_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the @Transactional annotation?",
                    "options": [
                        "A) To define a method as part of a web transaction.",
                        "B) To indicate that a method should run in a separate thread.",
                        "C) To define the scope of a single database transaction.",
                        "D) To convert data between formats."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The @Transactional annotation is a declarative way to manage database transactions. When a method annotated with @Transactional is called, Spring begins a transaction, and it commits the transaction upon successful completion or rolls it back if an exception is thrown."
                },
                {
                    "id": "d1_q015_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to extract a path variable from a URI, like the 'id' in '/users/{id}'?",
                    "options": [
                        "A) @RequestParam",
                        "B) @PathVariable",
                        "C) @RequestBody",
                        "D) @RequestHeader"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "@PathVariable is used to bind a method parameter to a URI template variable. @RequestParam is for query parameters (e.g., ?name=John)."
                },
                {
                    "id": "d1_q016_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the default embedded server in the 'spring-boot-starter-web' starter?",
                    "options": [
                        "A) Jetty",
                        "B) Undertow",
                        "C) Tomcat",
                        "D) Netty"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot uses an opinionated approach and provides Apache Tomcat as the default embedded servlet container. You can easily switch to Jetty or Undertow by modifying your dependencies."
                },
                {
                    "id": "d1_q017_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Easy",
                    "question_text": "What is Dependency Injection (DI)?",
                    "options": [
                        "A) A design pattern where a class requests dependencies from an external source rather than creating them itself.",
                        "B) A way to inject SQL code directly into a database query.",
                        "C) A method for injecting viruses into a system.",
                        "D) A tool for managing project dependencies in pom.xml."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Dependency Injection is a core principle of the Spring Framework. The Spring IoC (Inversion of Control) container is responsible for creating objects and injecting their required dependencies."
                },
                {
                    "id": "d1_q018_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Actuator endpoint provides information about the health of your application?",
                    "options": [
                        "A) /metrics",
                        "B) /info",
                        "C) /health",
                        "D) /beans"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The /health endpoint shows application health information. It aggregates status from various components like database, disk space, etc., into a simple 'UP' or 'DOWN' status."
                },
                {
                    "id": "d1_q019_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "How do you define a custom query in a Spring Data JPA repository?",
                    "options": [
                        "A) By defining a method with a specific name convention like 'findByLastName'.",
                        "B) By using the @Query annotation on a repository method.",
                        "C) Both A and B.",
                        "D) By writing a separate DAO implementation class."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Data JPA supports two main ways to define custom queries: derived query methods (by naming conventions) and manually defined queries using the @Query annotation with JPQL or native SQL."
                },
                {
                    "id": "d1_q020_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the @MockBean annotation in Spring Boot tests?",
                    "options": [
                        "A) To create a real bean instance for testing.",
                        "B) To add a mock object to the ApplicationContext that can replace an existing bean.",
                        "C) To mock static methods within a bean.",
                        "D) To configure a bean specifically for the test profile."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "@MockBean is used to add mocks (typically from a library like Mockito) to the Spring ApplicationContext. It can replace a bean of the same type in the context, allowing you to test how your components interact with that dependency in isolation."
                },
                {
                    "id": "d1_q021_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "How do you handle exceptions globally in a Spring Boot application?",
                    "options": [
                        "A) By adding a try-catch block in every controller method.",
                        "B) By using a class annotated with @ControllerAdvice and methods annotated with @ExceptionHandler.",
                        "C) By creating a custom Filter that catches all exceptions.",
                        "D) By implementing the ErrorController interface for every possible error."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A class annotated with @ControllerAdvice allows you to use @ExceptionHandler, @InitBinder, and @ModelAttribute methods across multiple controllers. It's the standard, clean way to handle exceptions globally."
                },
                {
                    "id": "d1_q022_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the use of the `spring-boot-maven-plugin`?",
                    "options": [
                        "A) It only compiles Java source code.",
                        "B) It creates an executable JAR or WAR file and allows running the application directly using 'mvn spring-boot:run'.",
                        "C) It manages database schemas.",
                        "D) It scans for security vulnerabilities in dependencies."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This plugin is essential for packaging a Spring Boot application into a single executable 'fat' JAR, which includes all dependencies and an embedded server. It also provides the 'spring-boot:run' goal for easy development."
                },
                {
                    "id": "d1_q023_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between @Component, @Service, and @Repository annotations?",
                    "options": [
                        "A) There is no difference; they are interchangeable aliases.",
                        "B) They are used for different purposes: @Service for business logic, @Repository for data access, and @Component as a generic stereotype.",
                        "C) @Service and @Repository are special types of @Component, but @Repository adds exception translation.",
                        "D) Both B and C are correct."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Functionally, they all register a class as a Spring-managed bean. However, they provide semantic meaning. @Service is for the service layer, and @Repository is for the persistence layer, which also enables automatic translation of persistence-related exceptions into Spring's DataAccessException hierarchy."
                },
                {
                    "id": "d1_q024_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to mark a field as the primary key in a JPA entity?",
                    "options": [
                        "A) @Key",
                        "B) @PrimaryKey",
                        "C) @Id",
                        "D) @EntityKey"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The @Id annotation from the `javax.persistence` package is the standard JPA way to specify the primary key of an entity."
                },
                {
                    "id": "d1_q025_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What does @ResponseBody on a controller method signify?",
                    "options": [
                        "A) That the method's return value should be bound to the response body, typically serialized to JSON.",
                        "B) That the method expects the request body to be deserialized into an object.",
                        "C) That the response will always be an HTML page.",
                        "D) That the method handles HTTP response codes."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "@ResponseBody indicates that the return value of the method should be written directly to the HTTP response body, bypassing view resolution. It's often used with @RestController."
                },
                {
                    "id": "d1_q026_s1",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "What is an 'Aspect' in Aspect-Oriented Programming (AOP)?",
                    "options": [
                        "A) A specific point in the execution of the program, like a method call.",
                        "B) The action taken by an aspect at a particular join point.",
                        "C) A module that encapsulates a cross-cutting concern, like logging or security.",
                        "D) An object that is advised by one or more aspects."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "An Aspect is the core concept of AOP. It's a class that implements a cross-cutting concern (a feature that spans multiple points in an application, like transaction management). It's typically annotated with @Aspect."
                },
                {
                    "id": "d1_q027_s1",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "Which of the following is NOT a valid advice type in Spring AOP?",
                    "options": [
                        "A) @Before",
                        "B) @After",
                        "C) @Finally",
                        "D) @Around"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The main advice types in Spring AOP are @Before, @After (finally), @AfterReturning, @AfterThrowing, and @Around. @Finally is not a Spring AOP annotation."
                },
                {
                    "id": "d1_q028_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How can you run specific logic only after the Spring Boot application has started?",
                    "options": [
                        "A) By putting the logic in the main method after SpringApplication.run().",
                        "B) By implementing the CommandLineRunner or ApplicationRunner interface.",
                        "C) By using a constructor in a @Service class.",
                        "D) By using the @PostConstruct annotation on a method."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "CommandLineRunner and ApplicationRunner are interfaces that provide a `run` method. Any bean implementing these interfaces will have its `run` method executed after the application context is loaded and before the application is ready to service requests."
                },
                {
                    "id": "d1_q029_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `getOne()` and `findById()` in JpaRepository?",
                    "options": [
                        "A) There is no difference.",
                        "B) `findById()` fetches the entity immediately, while `getOne()` returns a lazy-loaded proxy.",
                        "C) `getOne()` is deprecated in favor of `getById()`.",
                        "D) Both B and C."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`findById()` hits the database and returns an Optional containing the entity if found. `getOne()` (now deprecated, replaced by `getById()`) returns a proxy to the entity without hitting the database until an attribute (other than the ID) is accessed. This can lead to LazyInitializationException if accessed outside a transaction."
                },
                {
                    "id": "d1_q030_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "Which HTTP status code indicates a successful creation of a resource (e.g., after a POST request)?",
                    "options": [
                        "A) 200 OK",
                        "B) 201 Created",
                        "C) 204 No Content",
                        "D) 404 Not Found"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The standard REST convention is to return HTTP status 201 Created after a successful POST request that results in the creation of a new resource. The response often includes a Location header pointing to the new resource."
                },
                {
                    "id": "d1_q031_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Qualifier` annotation?",
                    "options": [
                        "A) To provide a unique name for a bean.",
                        "B) To specify which bean to inject when multiple candidates of the same type exist.",
                        "C) To set the quality of service for a REST endpoint.",
                        "D) To mark a bean as the primary candidate for autowiring."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When there are multiple beans of the same type in the context, Spring's autowiring might fail. `@Qualifier` is used along with `@Autowired` to specify which exact bean should be wired by its name."
                },
                {
                    "id": "d1_q032_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "What does `@WebMvcTest` do?",
                    "options": [
                        "A) It tests the full application stack, including the database.",
                        "B) It auto-configures the Spring MVC infrastructure and limits the context to web-related beans like @Controller, @ControllerAdvice, etc.",
                        "C) It only tests the web browser compatibility of the application.",
                        "D) It is used for performance testing of web controllers."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@WebMvcTest` is a slice annotation used for testing the web layer. It doesn't load the full context, making tests faster. You typically use it with `MockMvc` to send HTTP requests to your controllers without a running server."
                },
                {
                    "id": "d1_q033_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What are the default bean scopes in Spring?",
                    "options": [
                        "A) Singleton and Prototype",
                        "B) Singleton, Prototype, and Request",
                        "C) Singleton",
                        "D) Prototype"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "In a standard Spring application, the two default scopes are Singleton (one instance per container) and Prototype (a new instance for every request). In a web context, additional scopes like Request, Session, and Application are available."
                },
                {
                    "id": "d1_q034_s1",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "How do you configure custom security rules, like making some endpoints public and others private, in modern Spring Security (5.x+)?",
                    "options": [
                        "A) By overriding `configure(HttpSecurity http)` in a class extending `WebSecurityConfigurerAdapter`.",
                        "B) By defining a `SecurityFilterChain` bean.",
                        "C) By editing the `web.xml` file.",
                        "D) By using the `@Secured` annotation on every method."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The modern, component-based approach in Spring Security 5.x+ is to define a `SecurityFilterChain` as a bean. The older method of extending `WebSecurityConfigurerAdapter` is now deprecated."
                },
                {
                    "id": "d1_q035_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Entity` annotation?",
                    "options": [
                        "A) To mark a class as a Spring bean.",
                        "B) To specify that a class is a JPA entity, meaning it's mapped to a database table.",
                        "C) To define an entry point for the application.",
                        "D) To create a singleton object."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@Entity` from `javax.persistence` designates a POJO (Plain Old Java Object) as a JPA entity. The JPA provider will then assume this class is mapped to a table with the same name by default."
                },
                {
                    "id": "d1_q036_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which class can you use in a controller method to have more control over the HTTP response, including setting status codes and headers?",
                    "options": [
                        "A) `Object`",
                        "B) `String`",
                        "C) `ResponseEntity`",
                        "D) `HttpEntity`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`ResponseEntity` is a generic class that represents the entire HTTP response. You can use it to set the body, headers, and status code, providing full control over the response sent to the client."
                },
                {
                    "id": "d1_q037_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What does Spring Boot's auto-configuration do?",
                    "options": [
                        "A) It automatically writes your business logic.",
                        "B) It attempts to automatically configure your Spring application based on the JAR dependencies you have added.",
                        "C) It generates a web front-end for your application.",
                        "D) It configures the Java Virtual Machine for optimal performance."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Auto-configuration is the magic of Spring Boot. For example, if it sees `spring-boot-starter-web` on the classpath, it assumes you want to build a web app and configures Tomcat and Spring MVC. If it finds a `DataSource` bean and JPA on the classpath, it will configure JPA for you."
                },
                {
                    "id": "d1_q038_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Medium",
                    "question_text": "How can you load a custom properties file named `custom.properties`?",
                    "options": [
                        "A) Spring Boot does this automatically.",
                        "B) By using `@PropertySource(\"classpath:custom.properties\")` on a configuration class.",
                        "C) By using `System.load(\"custom.properties\")`.",
                        "D) By adding it to the `pom.xml`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@PropertySource` annotation provides a convenient and declarative mechanism for adding a `PropertySource` to Spring's `Environment`. It's used on `@Configuration` classes."
                },
                {
                    "id": "d1_q039_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the N+1 selects problem in JPA/Hibernate?",
                    "options": [
                        "A) A security vulnerability where N+1 users can access the system.",
                        "B) A performance issue where fetching N entities from the database results in N+1 separate queries being executed.",
                        "C) A database error that occurs when N+1 connections are opened.",
                        "D) A feature that improves query performance by N+1 times."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The N+1 problem occurs when you fetch a list of parent entities (1 query) and then lazily access a related child collection for each parent, resulting in N additional queries to fetch the children. It can be solved using JOIN FETCH or entity graphs."
                },
                {
                    "id": "d1_q040_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between constructor injection and setter injection?",
                    "options": [
                        "A) Constructor injection creates immutable objects, while setter injection allows for re-injection.",
                        "B) There is no functional difference.",
                        "C) Setter injection is always preferred over constructor injection.",
                        "D) Constructor injection is for dependencies, and setter injection is for primitive values."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Constructor injection is generally recommended for mandatory dependencies, as it ensures the object is in a valid state upon creation. Setter injection is more flexible and can be used for optional dependencies, but it doesn't guarantee that the dependency will be set."
                },
                {
                    "id": "d1_q041_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `@RequestBody` annotation?",
                    "options": [
                        "A) It binds the method return value to the response body.",
                        "B) It extracts the entire request body and converts it into a Java object.",
                        "C) It is used to specify the media type of the request.",
                        "D) It injects the `HttpServletRequest` object into the method."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@RequestBody` indicates that a method parameter should be bound to the body of the web request. Spring's `HttpMessageConverter`s are used to deserialize the request body (e.g., from JSON) into the parameter's object type."
                },
                {
                    "id": "d1_q042_s1",
                    "domain": "Spring Boot DevTools",
                    "difficulty": "Easy",
                    "question_text": "What is the main benefit of using `spring-boot-devtools`?",
                    "options": [
                        "A) It provides advanced debugging tools.",
                        "B) It enables features like automatic application restart and live reload for faster development.",
                        "C) It optimizes the final JAR for production.",
                        "D) It integrates with IDEs to provide code completion."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`spring-boot-devtools` enhances the development experience by automatically restarting the application when files on the classpath change, disabling caching, and enabling LiveReload in the browser."
                },
                {
                    "id": "d1_q043_s1",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "How can you customize the information exposed by the Actuator `/info` endpoint?",
                    "options": [
                        "A) By setting properties prefixed with `info.` in `application.properties`.",
                        "B) By creating a bean that implements the `InfoContributor` interface.",
                        "C) It cannot be customized.",
                        "D) Both A and B."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The `/info` endpoint can be populated with static information from `application.properties` (e.g., `info.app.name=My App`) or with dynamic information by creating one or more beans that implement the `InfoContributor` interface."
                },
                {
                    "id": "d1_q044_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between an `EAGER` and `LAZY` fetch type in JPA?",
                    "options": [
                        "A) `EAGER` loads data on-demand, `LAZY` loads it immediately.",
                        "B) They are the same.",
                        "C) `EAGER` loading fetches associated data along with the main entity, while `LAZY` loading fetches it only when accessed.",
                        "D) `LAZY` is the default for `@OneToOne` and `EAGER` is the default for `@OneToMany`."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Eager fetching can lead to performance problems by loading too much data. Lazy fetching is generally preferred as it loads related data only when it's explicitly requested, but it can cause the N+1 problem if not handled carefully."
                },
                {
                    "id": "d1_q045_s1",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "Which Spring Cloud project provides client-side load balancing?",
                    "options": [
                        "A) Spring Cloud Gateway",
                        "B) Spring Cloud Config",
                        "C) Spring Cloud Sleuth",
                        "D) Spring Cloud LoadBalancer (formerly Ribbon)"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Cloud LoadBalancer provides client-side load balancing, allowing clients to intelligently distribute requests across a pool of available service instances. It replaced Netflix Ribbon as the default implementation."
                },
                {
                    "id": "d1_q046_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to create a bean definition within a `@Configuration` class?",
                    "options": [
                        "A) `@Component`",
                        "B) `@Bean`",
                        "C) `@Service`",
                        "D) `@Produces`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@Bean` annotation is applied to a method in a configuration class to indicate that the method returns an object that should be registered as a bean in the Spring application context."
                },
                {
                    "id": "d1_q047_s1",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "By default, if Spring Security is on the classpath, what does it do?",
                    "options": [
                        "A) Nothing, it must be explicitly enabled.",
                        "B) It secures all endpoints, requiring HTTP Basic authentication for access.",
                        "C) It only enables security for POST requests.",
                        "D) It redirects all traffic to HTTPS."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "With auto-configuration, simply adding the `spring-boot-starter-security` dependency will secure the entire application. It creates a user named 'user' with a randomly generated password printed to the console at startup."
                },
                {
                    "id": "d1_q048_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "Which property do you set in `application.properties` to specify the database URL?",
                    "options": [
                        "A) `spring.database.url`",
                        "B) `spring.jpa.database-url`",
                        "C) `spring.datasource.url`",
                        "D) `db.connection.string`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The standard properties for configuring a `DataSource` in Spring Boot are prefixed with `spring.datasource`. `spring.datasource.url`, `spring.datasource.username`, and `spring.datasource.password` are the most common ones."
                },
                {
                    "id": "d1_q049_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `spring-boot-starter-hateoas` starter?",
                    "options": [
                        "A) To add support for asynchronous requests.",
                        "B) To help in creating REST representations that follow the HATEOAS principle (Hypermedia as the Engine of Application State).",
                        "C) To provide a client for consuming SOAP web services.",
                        "D) To add HTML templating with Thymeleaf."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "HATEOAS is a constraint of the REST application architecture. This starter makes it easier to add links to your REST responses, guiding clients on how to navigate the API and what actions are available next."
                },
                {
                    "id": "d1_q050_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `@MockBean` and `@Mock`?",
                    "options": [
                        "A) They are identical.",
                        "B) `@Mock` is a Mockito annotation, while `@MockBean` is a Spring Boot annotation that adds a Mockito mock to the application context.",
                        "C) `@MockBean` is used for unit tests, while `@Mock` is for integration tests.",
                        "D) `@Mock` creates a real object, while `@MockBean` creates a proxy."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@Mock` comes from the Mockito library and is used to create a mock object. `@MockBean` is a Spring Boot test annotation that not only creates a mock but also integrates it into the Spring `ApplicationContext`, replacing any existing bean of the same type."
                },
                {
                    "id": "d1_q051_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the correct way to shut down a Spring Boot application gracefully?",
                    "options": [
                        "A) `System.exit(0)`",
                        "B) By sending a request to the `/shutdown` Actuator endpoint (if enabled).",
                        "C) By killing the process with `kill -9`.",
                        "D) By deleting the application JAR file."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The Actuator's `/shutdown` endpoint allows for a graceful shutdown, giving the application context time to close properly and release resources. It must be explicitly enabled and secured."
                },
                {
                    "id": "d1_q052_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@ConfigurationProperties` annotation?",
                    "options": [
                        "A) To inject a single property value.",
                        "B) To bind a whole hierarchy of properties from a file into a typesafe Java object.",
                        "C) To define a source for configuration properties.",
                        "D) To specify the format of the properties file (e.g., XML or YAML)."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ConfigurationProperties` is a powerful annotation for mapping external configuration (like from `application.yml`) to a POJO. It allows you to work with configuration in a structured, typesafe way."
                },
                {
                    "id": "d1_q053_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "How do you specify the table name for a JPA entity if it's different from the class name?",
                    "options": [
                        "A) `@Table(name = \"custom_table_name\")`",
                        "B) `@Entity(name = \"custom_table_name\")`",
                        "C) `@Column(table = \"custom_table_name\")`",
                        "D) By renaming the class file."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `@Table` annotation is used on an entity class to specify mapping details for the primary table. Its `name` attribute allows you to set a custom table name."
                },
                {
                    "id": "d1_q054_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "Which of the following best describes the 'IoC' in 'Spring IoC Container'?",
                    "options": [
                        "A) Internal Object Controller",
                        "B) Inversion of Control",
                        "C) Inter-object Communication",
                        "D) Integration of Components"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Inversion of Control (IoC) is a design principle where the control of object creation and lifecycle is passed from the application code to a container or framework. Spring's `ApplicationContext` is an IoC container."
                },
                {
                    "id": "d1_q055_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "What is the default port for a Spring Boot web application?",
                    "options": [
                        "A) 80",
                        "B) 8080",
                        "C) 9090",
                        "D) 443"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, the embedded Tomcat server in a Spring Boot application starts and listens on port 8080. This can be changed by setting the `server.port` property."
                },
                {
                    "id": "d1_q056_s1",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of a `PasswordEncoder` bean in Spring Security?",
                    "options": [
                        "A) To encode URL parameters.",
                        "B) To compress HTTP responses.",
                        "C) To securely hash and verify passwords for user authentication.",
                        "D) To encrypt data in the database."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A `PasswordEncoder` is essential for security. It provides a one-way transformation (hashing) for passwords so they are not stored in plain text. Spring Security requires a `PasswordEncoder` bean to be available in the context."
                },
                {
                    "id": "d1_q057_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "Which annotation do you use to define a composite primary key in JPA?",
                    "options": [
                        "A) `@IdClass` or `@EmbeddedId`",
                        "B) `@CompositeKey`",
                        "C) `@MultiKey`",
                        "D) `@Id` on multiple fields"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "JPA provides two standard ways to handle composite primary keys: `@IdClass`, which uses a separate class to hold the key fields, and `@EmbeddedId`, which uses an embeddable class directly as the key."
                },
                {
                    "id": "d1_q058_s1",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "What is the role of a Service Discovery server like Eureka in a microservices architecture?",
                    "options": [
                        "A) To store application configuration.",
                        "B) To act as an entry point for all incoming requests.",
                        "C) To maintain a registry of all available service instances and their locations.",
                        "D) To trace requests as they travel through multiple services."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A Service Discovery server (like Netflix Eureka or Consul) acts as a phonebook for your services. Microservices register themselves with the server on startup and query it to find the network locations of other services they need to communicate with."
                },
                {
                    "id": "d1_q059_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "If you have two beans of the same type, how can you specify which one to inject?",
                    "options": [
                        "A) Using `@Qualifier`",
                        "B) Using `@Primary` on one of the bean definitions",
                        "C) By naming the variable the same as the bean name",
                        "D) All of the above"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "All three methods can resolve ambiguity. `@Primary` marks one bean as the default choice. `@Qualifier` allows the consumer to explicitly ask for a bean by its name. Matching the variable name to the bean name is another way Spring can resolve the ambiguity."
                },
                {
                    "id": "d1_q060_s1",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What does `spring.jpa.hibernate.ddl-auto=update` do?",
                    "options": [
                        "A) It validates the schema and makes no changes to the database.",
                        "B) It drops the previous schema and creates a new one on startup.",
                        "C) It updates the database schema according to the entity mappings on startup.",
                        "D) It creates the schema on startup and drops it on shutdown."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `update` value for `ddl-auto` tells Hibernate to compare the entity model with the existing database schema and automatically add new columns, tables, or constraints as needed. It's useful for development but should be used with caution in production."
                },
                {
                    "id": "d1_q061_s1",
                    "domain": "Spring Framework",
                    "difficulty": "Easy",
                    "question_text": "Which stereotype annotation is used for the persistence layer?",
                    "options": [
                        "A) @Service",
                        "B) @Component",
                        "C) @Controller",
                        "D) @Repository"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "@Repository is used to indicate that the class provides the mechanism for storage, retrieval, search, update and delete operation on objects. It also enables exception translation for the persistence layer."
                },
                {
                    "id": "d1_q062_s1",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which starter should you use to build a reactive web application in Spring Boot?",
                    "options": [
                        "A) spring-boot-starter-web",
                        "B) spring-boot-starter-webflux",
                        "C) spring-boot-starter-reactive",
                        "D) spring-boot-starter-netty"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`spring-boot-starter-webflux` brings in dependencies for building reactive web applications using Project Reactor and runs on an event-loop based server like Netty by default."
                },
                {
                    "id": "d1_q063_s1",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which class is the main entry point for writing tests for REST controllers without needing a full HTTP server?",
                    "options": [
                        "A) TestRestTemplate",
                        "B) WebClient",
                        "C) MockMvc",
                        "D) RestTemplate"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`MockMvc` allows you to send mock HTTP requests to your controllers and assert the responses, all within a test context without needing to start a real server. It's commonly used with `@WebMvcTest`."
                },
                {
                    "id": "d1_q064_s1",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Easy",
                    "question_text": "Besides `.properties` files, what other common file format is natively supported for external configuration in Spring Boot?",
                    "options": [
                        "A) XML",
                        "B) JSON",
                        "C) CSV",
                        "D) YAML (.yml)"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Boot has first-class support for YAML files. If you include the `snakeyaml` dependency (which is included in starters like `spring-boot-starter-web`), Spring Boot will automatically parse `application.yml` files."
                },
                {
                    "id": "d1_q065_s1",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the primary purpose of the `spring-boot-starter-parent` POM?",
                    "options": [
                        "A) It defines the main class of the application.",
                        "B) It provides useful Maven defaults and a dependency-management section for managing versions of dependencies.",
                        "C) It is a parent class for all @Service components.",
                        "D) It contains all possible Spring Boot starters."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Inheriting from the `spring-boot-starter-parent` POM in your Maven `pom.xml` allows you to manage dependency versions centrally and provides sensible defaults for plugins like the compiler plugin."
                }
            ]
        },
        {
            "name": "Spring Boot Practice Set 4",
            "questions": [
                {
                    "id": "d2_q001_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "Which class is the entry point for running a Spring Boot application?",
                    "options": [
                        "A) `ApplicationContext.start()`",
                        "B) `SpringApplication.run()`",
                        "C) `BootApplication.main()`",
                        "D) `ContextLoader.init()`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A Spring Boot application is launched by calling the static `SpringApplication.run()` method from the main method, passing the primary configuration class and command-line arguments."
                },
                {
                    "id": "d2_q002_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is a shortcut for `@RequestMapping(method = RequestMethod.POST)`?",
                    "options": [
                        "A) `@GetMapping`",
                        "B) `@PutMapping`",
                        "C) `@PostMapping`",
                        "D) `@PatchMapping`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@PostMapping` is a composed annotation that specifically maps HTTP POST requests onto handler methods. It's more concise than the generic `@RequestMapping`."
                },
                {
                    "id": "d2_q003_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "Which property in `application.properties` is used to show the SQL statements executed by Hibernate?",
                    "options": [
                        "A) `spring.jpa.show-sql=true`",
                        "B) `hibernate.show_sql=true`",
                        "C) `spring.jpa.log-sql=true`",
                        "D) `logging.level.org.hibernate.SQL=DEBUG`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Setting `spring.jpa.show-sql=true` will log all executed SQL statements to the console. For more control over formatting, `logging.level.org.hibernate.SQL=DEBUG` is often preferred."
                },
                {
                    "id": "d2_q004_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Actuator endpoint would you use to view the current environment properties?",
                    "options": [
                        "A) `/properties`",
                        "B) `/configprops`",
                        "C) `/env`",
                        "D) `/system`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `/env` endpoint displays properties from all `PropertySource`s in the current `Environment`, including system properties, environment variables, and properties from `application.properties`."
                },
                {
                    "id": "d2_q005_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between `@Autowired` and `@Inject` annotations?",
                    "options": [
                        "A) `@Autowired` is from Spring; `@Inject` is from the Java CDI standard (JSR-330). Functionally, they are very similar.",
                        "B) `@Inject` can only be used for constructor injection.",
                        "C) `@Autowired` is deprecated in favor of `@Inject`.",
                        "D) There is no difference at all."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Both annotations are used for dependency injection. `@Autowired` is Spring-specific and has a `required` attribute. `@Inject` is part of a Java standard, making the code potentially more portable across DI frameworks, but it lacks the `required` attribute."
                },
                {
                    "id": "d2_q006_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to test a specific layer of your application, for example, just the JPA persistence layer?",
                    "options": [
                        "A) `@SpringBootTest`",
                        "B) `@DataJpaTest`",
                        "C) `@JdbcTest`",
                        "D) `@PersistenceTest`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@DataJpaTest` is a 'slice' annotation that focuses on testing the persistence layer. It configures an in-memory database by default and loads only JPA-related beans, making tests faster."
                },
                {
                    "id": "d2_q007_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@Conditional` annotation family in Spring Boot?",
                    "options": [
                        "A) To run code only if a certain condition in an 'if' statement is met.",
                        "B) To create beans or configurations only when specific conditions are true.",
                        "C) To define conditional logic in Thymeleaf templates.",
                        "D) To set conditional breakpoints for debugging."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Conditional annotations (like `@ConditionalOnClass`, `@ConditionalOnBean`, `@ConditionalOnProperty`) are at the heart of Spring Boot's auto-configuration. They allow Boot to register beans only if certain criteria are met, making the configuration highly adaptable."
                },
                {
                    "id": "d2_q008_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "Which annotation is used to bind a request parameter from a URL query string (e.g., `?name=test`) to a method parameter?",
                    "options": [
                        "A) `@PathVariable`",
                        "B) `@RequestBody`",
                        "C) `@RequestHeader`",
                        "D) `@RequestParam`"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@RequestParam` is used to extract query parameters, form parameters, and even parts of multipart requests. It's different from `@PathVariable`, which extracts parts of the URL path."
                },
                {
                    "id": "d2_q009_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "How can you implement a method in a JpaRepository that is not provided by default, for example `List<User> findByStatus(String status);`?",
                    "options": [
                        "A) You must write a full implementation class with JDBC.",
                        "B) Simply declare the method in the repository interface; Spring Data will generate the implementation from the method name.",
                        "C) You need to use the `@Implement` annotation.",
                        "D) This is not possible."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This feature is called 'derived query methods'. Spring Data JPA parses the method name, and if it follows conventions (`findBy...`, `countBy...`, etc.), it automatically creates the appropriate database query."
                },
                {
                    "id": "d2_q010_s2",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "How can you access the currently authenticated principal's information in a controller method?",
                    "options": [
                        "A) By adding a `Principal` object or `Authentication` object as a method parameter.",
                        "B) By calling `SecurityContextHolder.getContext().getAuthentication()`.",
                        "C) By using the `@CurrentUser` annotation.",
                        "D) Both A and B are valid ways."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring MVC can automatically resolve and inject the `Principal` or `Authentication` object into a controller method. Alternatively, the static `SecurityContextHolder` provides access to the security context from anywhere in the application."
                },
                {
                    "id": "d2_q011_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "What is a 'Join Point' in AOP?",
                    "options": [
                        "A) The combination of two or more aspects.",
                        "B) A point during the execution of a program, such as the execution of a method or the handling of an exception.",
                        "C) The logic that is executed by an aspect.",
                        "D) The database table where two tables are joined."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A join point is a specific, well-defined point in the program flow. In Spring AOP, a join point is always the execution of a method."
                },
                {
                    "id": "d2_q012_s2",
                    "domain": "Spring AOP",
                    "difficulty": "Hard",
                    "question_text": "What is a 'Pointcut' in AOP?",
                    "options": [
                        "A) The place in code where advice is applied.",
                        "B) A predicate or expression that matches join points.",
                        "C) The final result of an advice.",
                        "D) A tool for cutting through boilerplate code."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A pointcut is an expression that determines which join points (method executions) the advice should be applied to. For example, a pointcut could specify 'all methods in the service layer'."
                },
                {
                    "id": "d2_q013_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which of these is a popular templating engine often used with Spring Boot for server-side rendering of HTML?",
                    "options": [
                        "A) React",
                        "B) Jackson",
                        "C) Thymeleaf",
                        "D) Hibernate"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Thymeleaf is a modern server-side Java template engine. Spring Boot provides auto-configuration for it via the `spring-boot-starter-thymeleaf` starter."
                },
                {
                    "id": "d2_q014_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "Which scope creates a new bean instance each time it is requested from the container?",
                    "options": [
                        "A) singleton",
                        "B) prototype",
                        "C) request",
                        "D) session"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The 'prototype' scope results in a new bean instance every time a request for that specific bean is made. In contrast, 'singleton' (the default) provides the same instance every time."
                },
                {
                    "id": "d2_q015_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "Which annotation allows you to combine multiple JPA repository interfaces into one?",
                    "options": [
                        "A) `@EnableJpaRepositories`",
                        "B) `@NoRepositoryBean`",
                        "C) `@CombinedRepository`",
                        "D) There is no such annotation; you use interface inheritance."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "To combine repositories, you define a new interface that extends the other repository interfaces. Spring Data will then create a proxy that implements all inherited methods. `@NoRepositoryBean` is used to prevent an intermediate interface from being instantiated as a repository."
                },
                {
                    "id": "d2_q016_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "How do you specify the active profile for a Spring Boot test?",
                    "options": [
                        "A) By using the `@ActiveProfiles(\"test\")` annotation on the test class.",
                        "B) By creating an `application-test.properties` file.",
                        "C) By setting `spring.profiles.active=test` in the test's properties.",
                        "D) All of the above can contribute to activating a profile."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `@ActiveProfiles` annotation is the most direct and explicit way to set the active profiles for a specific test class or test method, overriding any other profile configurations."
                },
                {
                    "id": "d2_q017_s2",
                    "domain": "Spring Boot Messaging",
                    "difficulty": "Hard",
                    "question_text": "Which Spring Boot starter is used for integrating with messaging systems like RabbitMQ or Kafka?",
                    "options": [
                        "A) `spring-boot-starter-jms`",
                        "B) `spring-boot-starter-amqp` for RabbitMQ, `spring-kafka` for Kafka",
                        "C) `spring-boot-starter-messaging`",
                        "D) `spring-boot-starter-integration`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot provides specific starters for different messaging technologies. `spring-boot-starter-amqp` is for AMQP-based brokers like RabbitMQ, while the `spring-kafka` project provides its own starter for Apache Kafka."
                },
                {
                    "id": "d2_q018_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is CORS and how do you enable it globally in Spring Boot?",
                    "options": [
                        "A) Cross-Origin Resource Sharing; enable it with `@CrossOrigin` on every controller method.",
                        "B) Cross-Object Request System; enable it in `pom.xml`.",
                        "C) Cross-Origin Resource Sharing; enable it by defining a `WebMvcConfigurer` bean with a global `addCorsMappings` configuration.",
                        "D) Core Object Relational System; enable it with `@EnableCORS`."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "CORS is a browser security mechanism. While `@CrossOrigin` works on a per-controller/method basis, the recommended way to configure it globally is by implementing `WebMvcConfigurer` and overriding the `addCorsMappings` method."
                },
                {
                    "id": "d2_q019_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of `@Modifying` annotation in a Spring Data JPA repository?",
                    "options": [
                        "A) It indicates that the query will modify the application state.",
                        "B) It signals that the query is a DML (Data Manipulation Language) statement (UPDATE, DELETE, INSERT) and requires additional handling.",
                        "C) It is used to modify the query result before returning.",
                        "D) It marks the repository as mutable."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When you use `@Query` to define a query that modifies data (not just selects it), you must also add `@Modifying`. This tells Spring Data that the query is not a standard SELECT and may need to be executed within a transaction and that the persistence context may need to be cleared."
                },
                {
                    "id": "d2_q020_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "What is the role of `TestRestTemplate` in Spring Boot testing?",
                    "options": [
                        "A) It is a mock version of `RestTemplate` that does not make real HTTP calls.",
                        "B) It is a convenience class for integration testing that makes real HTTP calls to a running server.",
                        "C) It is used to configure templates for test reports.",
                        "D) It is a replacement for `MockMvc`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`TestRestTemplate` is specifically designed for use in integration tests (e.g., with `@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)`). It works like a standard `RestTemplate` but is fault-tolerant and handles authentication easily in a test context."
                },
                {
                    "id": "d2_q021_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How can you disable a specific auto-configuration class?",
                    "options": [
                        "A) By deleting its source file.",
                        "B) By using the `exclude` attribute of the `@EnableAutoConfiguration` or `@SpringBootApplication` annotation.",
                        "C) By setting a property `spring.autoconfigure.exclude` in `application.properties`.",
                        "D) Both B and C."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Boot provides two primary ways to exclude an auto-configuration class if you want to provide your own configuration: either declaratively with an annotation attribute or externally via a property."
                },
                {
                    "id": "d2_q022_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Hard",
                    "question_text": "What is the Spring `ApplicationContext`?",
                    "options": [
                        "A) A class that contains the main method.",
                        "B) The central interface within a Spring application for providing configuration information to the application. It is the Spring IoC container.",
                        "C) A configuration file for web applications.",
                        "D) A context for security-related information."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `ApplicationContext` is the core of the Spring Framework. It is responsible for instantiating, configuring, and assembling beans. It also provides other services like event propagation, internationalization, and resource loading."
                },
                {
                    "id": "d2_q023_s2",
                    "domain": "Spring Boot Webflux",
                    "difficulty": "Hard",
                    "question_text": "In Project Reactor (used by WebFlux), what is the difference between a `Mono` and a `Flux`?",
                    "options": [
                        "A) `Mono` is for single-channel audio, `Flux` is for multi-channel.",
                        "B) `Mono` is a publisher that emits 0 or 1 item, while `Flux` emits 0 to N items.",
                        "C) `Mono` is synchronous, `Flux` is asynchronous.",
                        "D) They are interchangeable."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "These are the two main publisher types in Project Reactor. You use `Mono<T>` for asynchronous operations that will yield at most one result (like fetching a single user by ID). You use `Flux<T>` for operations that can return multiple results (like fetching all users)."
                },
                {
                    "id": "d2_q024_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Version` annotation in a JPA entity?",
                    "options": [
                        "A) To specify the version of the database schema.",
                        "B) To support optimistic locking and prevent lost updates.",
                        "C) To define the version of the application that created the entity.",
                        "D) To version control the entity class itself."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@Version` annotation is used on a numeric field in an entity. Hibernate will automatically increment this field on every update. When an update is attempted, it checks if the version in the database matches the version of the entity in memory, throwing an exception if they don't, which prevents concurrent modifications from overwriting each other."
                },
                {
                    "id": "d2_q025_s2",
                    "domain": "Spring Boot Configuration",
                    "difficulty": "Hard",
                    "question_text": "What is the order of precedence for loading properties in Spring Boot?",
                    "options": [
                        "A) `application.properties` overrides command-line arguments.",
                        "B) Command-line arguments override properties in `application.properties`.",
                        "C) Profile-specific properties (`application-dev.properties`) override properties in `application.properties`.",
                        "D) Both B and C are correct."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Boot has a well-defined property precedence order. Command-line arguments have very high priority. Profile-specific properties override the default `application.properties`. This allows for flexible configuration across different environments."
                },
                {
                    "id": "d2_q026_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "What is a Circuit Breaker pattern and which Spring Cloud project helps implement it?",
                    "options": [
                        "A) A security pattern to block malicious requests; implemented by Spring Security.",
                        "B) A pattern to handle faults in remote service calls; implemented by Spring Cloud Circuit Breaker (using Resilience4J).",
                        "C) A pattern for breaking down monolithic applications; implemented by Spring Boot.",
                        "D) A pattern for electrical wiring in servers; not related to Spring."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The Circuit Breaker pattern prevents an application from repeatedly trying to call a service that is known to be failing. Spring Cloud Circuit Breaker provides an abstraction over implementations like Resilience4J (formerly Netflix Hystrix), allowing you to wrap failing calls and provide fallbacks."
                },
                {
                    "id": "d2_q027_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `@PostConstruct` annotation?",
                    "options": [
                        "A) It is executed before a bean is removed from the container.",
                        "B) It is used to mark a constructor for dependency injection.",
                        "C) It is executed after a bean is initialized and its dependencies are injected.",
                        "D) It is used to construct a REST response."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `@PostConstruct` annotation is used on a method that needs to be executed after dependency injection is done to perform any initialization. It is part of the Java EE specification (JSR-250)."
                },
                {
                    "id": "d2_q028_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which annotation allows you to map multiple URL patterns to a single controller method?",
                    "options": [
                        "A) `@RequestMapping({\"/path1\", \"/path2\"})`",
                        "B) `@MultiMapping(\"/path1\", \"/path2\")`",
                        "C) `@RequestPaths(value={\"/path1\", \"/path2\"})`",
                        "D) This is not possible."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `value` (or `path`) attribute of `@RequestMapping` (and its shortcuts like `@GetMapping`) is an array, allowing you to specify multiple URI patterns that will be handled by the same method."
                },
                {
                    "id": "d2_q029_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is a JPA `EntityGraph`?",
                    "options": [
                        "A) A visual representation of the database schema.",
                        "B) A feature that allows you to define a template for fetching a graph of related entities, overriding the default EAGER/LAZY settings.",
                        "C) A graph database integrated with JPA.",
                        "D) A way to trace transactions across entities."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An `EntityGraph` is a powerful tool for solving the N+1 problem. It lets you specify exactly which related associations to fetch eagerly for a particular query, giving you fine-grained control over the generated SQL JOINs."
                },
                {
                    "id": "d2_q030_s2",
                    "domain": "Spring Boot Security",
                    "difficulty": "Easy",
                    "question_text": "What is the default username when `spring-boot-starter-security` is added?",
                    "options": [
                        "A) admin",
                        "B) root",
                        "C) user",
                        "D) test"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "For basic authentication, Spring Boot Security's auto-configuration creates a default user with the username 'user'. The password is a randomly generated UUID that is printed to the console on startup."
                },
                {
                    "id": "d2_q031_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the role of a `BeanPostProcessor`?",
                    "options": [
                        "A) To process beans after they are used.",
                        "B) A framework hook that allows for custom modification of new bean instances, e.g., to wrap them in proxies.",
                        "C) A tool for editing bean definitions in `application.properties`.",
                        "D) To process HTTP POST requests for beans."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `BeanPostProcessor` operates on bean instances created by the container. It's a powerful extension point used internally by Spring for features like AOP proxying and can be used by developers for custom logic after bean initialization."
                },
                {
                    "id": "d2_q032_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "How can you change the management port for Actuator endpoints so they are not on the main application port?",
                    "options": [
                        "A) This is not possible; they always run on the same port.",
                        "B) By setting `management.server.port=<port_number>` in `application.properties`.",
                        "C) By setting `actuator.port=<port_number>`.",
                        "D) By using the `@ManagementPort` annotation."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "For security and operational reasons, it's common practice to expose the Actuator endpoints on a separate port from the main application. This is achieved by setting the `management.server.port` property."
                },
                {
                    "id": "d2_q033_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What does `@JsonTest` annotation do in Spring Boot testing?",
                    "options": [
                        "A) It tests the entire web layer for JSON responses.",
                        "B) It is used for testing JSON serialization and deserialization of objects.",
                        "C) It validates the JSON syntax in your source code.",
                        "D) It generates test data in JSON format."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@JsonTest` is another slice annotation that focuses on testing JSON mapping. It auto-configures Jackson (or Gson) and provides `JacksonTester` and `GsonTester` utilities to easily verify that your objects serialize to and deserialize from JSON correctly."
                },
                {
                    "id": "d2_q034_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Query` annotation in Spring Data JPA?",
                    "options": [
                        "A) To define a query based on the method name.",
                        "B) To allow writing a custom JPQL or native SQL query for a repository method.",
                        "C) To query the application context for available beans.",
                        "D) To perform a query against a logging framework."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "While derived query methods are convenient, sometimes you need more complex queries. The `@Query` annotation gives you full control by allowing you to provide the exact JPQL (Java Persistence Query Language) or native SQL string to be executed."
                },
                {
                    "id": "d2_q035_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to indicate that an application should use scheduling?",
                    "options": [
                        "A) `@EnableScheduling`",
                        "B) `@Schedule`",
                        "C) `@EnableTasks`",
                        "D) `@RunScheduled`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "You must add `@EnableScheduling` to one of your `@Configuration` classes to enable support for scheduled tasks. Then, you can annotate methods with `@Scheduled` to define when they should run."
                },
                {
                    "id": "d2_q036_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation defines a scheduled task to run at a fixed rate?",
                    "options": [
                        "A) `@Scheduled(cron = \"...\")`",
                        "B) `@Scheduled(fixedRate = 5000)`",
                        "C) `@Scheduled(fixedDelay = 5000)`",
                        "D) Both B and C are used for fixed-time scheduling."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`fixedRate` runs the task every N milliseconds, regardless of when the previous run finished. `fixedDelay` ensures there is a delay of N milliseconds between the end of the last execution and the start of the next one. `cron` is for more complex, cron-like scheduling."
                },
                {
                    "id": "d2_q037_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "What is the primary role of a Spring Cloud Config Server?",
                    "options": [
                        "A) To configure the Spring Boot application context.",
                        "B) To provide centralized, externalized configuration for a distributed system.",
                        "C) To manage server hardware configurations.",
                        "D) To serve static configuration files like XML."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A Config Server allows you to manage configuration for all your microservices in a central place (often a Git repository). Services connect to the Config Server on startup to fetch their configuration, which means you can change configuration without redeploying the services."
                },
                {
                    "id": "d2_q038_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "Which annotation would you use to map an HTTP DELETE request?",
                    "options": [
                        "A) `@RequestMapping(method = RequestMethod.DELETE)`",
                        "B) `@DeleteMapping`",
                        "C) `@RemoveMapping`",
                        "D) Both A and B"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`@DeleteMapping` is the specific shortcut annotation for mapping HTTP DELETE requests, but the more general `@RequestMapping` can also be configured to achieve the same result."
                },
                {
                    "id": "d2_q039_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Easy",
                    "question_text": "In dependency injection, what does 'inversion of control' refer to?",
                    "options": [
                        "A) The code controls the framework.",
                        "B) The framework controls the creation and lifecycle of objects (beans).",
                        "C) The control flow of the program is inverted.",
                        "D) The database controls the application logic."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Normally, you write code that creates its own dependencies (`new MyService()`). With IoC, you relinquish this control to the Spring container. You simply declare what you need, and the container 'injects' it for you."
                },
                {
                    "id": "d2_q040_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which interface in Spring Data provides methods for pagination and sorting?",
                    "options": [
                        "A) `CrudRepository`",
                        "B) `JpaRepository`",
                        "C) `PagingAndSortingRepository`",
                        "D) `ListCrudRepository`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`PagingAndSortingRepository` is an extension of `CrudRepository` that adds methods like `findAll(Sort sort)` and `findAll(Pageable pageable)` to support retrieving data in sorted and paginated chunks."
                },
                {
                    "id": "d2_q041_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of `@EnableConfigurationProperties`?",
                    "options": [
                        "A) To enable reading from `application.properties`.",
                        "B) To register a bean that has been annotated with `@ConfigurationProperties`.",
                        "C) To enable remote configuration properties.",
                        "D) To automatically create properties files."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "If you create a class annotated with `@ConfigurationProperties` but it's not a standard `@Component`, you need a way to tell Spring to create a bean of that type and bind the properties to it. `@EnableConfigurationProperties` on a `@Configuration` class does exactly that."
                },
                {
                    "id": "d2_q042_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "How can you return a specific HTTP status code from a controller method, for example, 404 Not Found?",
                    "options": [
                        "A) By returning a `ResponseEntity` object with the desired status.",
                        "B) By throwing a custom exception annotated with `@ResponseStatus(HttpStatus.NOT_FOUND)`.",
                        "C) Both A and B are valid methods.",
                        "D) By calling `System.exit(404)`."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "You can have full control by wrapping your response in a `ResponseEntity`. A simpler alternative for specific error cases is to define a custom exception and annotate it with `@ResponseStatus`, which Spring will automatically map to the correct HTTP response code."
                },
                {
                    "id": "d2_q043_s2",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What does the `antMatchers()` method do in Spring Security configuration?",
                    "options": [
                        "A) It matches against ant build scripts.",
                        "B) It allows configuring access control rules for URL patterns using Ant-style paths (e.g., `/api/**`).",
                        "C) It matches against user agent strings.",
                        "D) It performs static analysis on your code."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`antMatchers` is a key part of configuring `HttpSecurity`. It lets you specify which URL patterns your security rules apply to, for example, `http.authorizeRequests().antMatchers(\"/public/**\").permitAll()`."
                },
                {
                    "id": "d2_q044_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "What does ORM stand for?",
                    "options": [
                        "A) Object-Relational Mapping",
                        "B) Object-Resource Management",
                        "C) Ordered-Result Model",
                        "D) Oracle-Relation-MySQL"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "ORM is a technique that lets you query and manipulate data from a database using an object-oriented paradigm. Hibernate is the most popular ORM framework used with Spring Boot."
                },
                {
                    "id": "d2_q045_s2",
                    "domain": "Spring Boot Webflux",
                    "difficulty": "Hard",
                    "question_text": "What is `WebClient` in Spring WebFlux?",
                    "options": [
                        "A) A server-side component for handling client requests.",
                        "B) A legacy HTTP client, replaced by `RestTemplate`.",
                        "C) A non-blocking, reactive client for performing HTTP requests.",
                        "D) A tool for testing web clients."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`WebClient` is the modern, reactive alternative to `RestTemplate`. It is part of the WebFlux stack and is non-blocking by nature, making it ideal for use in reactive applications to call other services without blocking the event loop."
                },
                {
                    "id": "d2_q046_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `@Lazy` annotation?",
                    "options": [
                        "A) To make a method execute slowly.",
                        "B) To indicate that a bean should not be initialized until it is first referenced.",
                        "C) To define a bean that is not thread-safe.",
                        "D) To specify a lazy-loading strategy for a database query."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, singleton beans are created eagerly when the application context starts. Annotating a bean with `@Lazy` defers its initialization until it's actually needed by another bean, which can speed up application startup time."
                },
                {
                    "id": "d2_q047_s2",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which Actuator endpoint provides a list of all beans in the application context?",
                    "options": [
                        "A) `/beans`",
                        "B) `/context`",
                        "C) `/mappings`",
                        "D) `/allbeans`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `/beans` endpoint returns a complete list of all singleton beans in your application, along with their scope, type, and dependencies. It's very useful for debugging context configuration."
                },
                {
                    "id": "d2_q048_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `spring-boot-starter-data-rest`?",
                    "options": [
                        "A) It is the same as `spring-boot-starter-data-jpa`.",
                        "B) It provides a client library for consuming REST APIs.",
                        "C) It automatically exposes your Spring Data repositories as REST endpoints.",
                        "D) It adds REST support to the database itself."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Data REST builds on top of Spring Data repositories and automatically creates RESTful endpoints for your entities, complete with support for CRUD operations, pagination, and sorting, saving a lot of boilerplate code."
                },
                {
                    "id": "d2_q049_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which object can you add to a controller method's parameters to add attributes to the model for a view-based response (like with Thymeleaf)?",
                    "options": [
                        "A) `Map`",
                        "B) `Model`",
                        "C) `ModelAndView`",
                        "D) Any of the above"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring MVC is very flexible. You can use a `Model` or `Map` to add attributes and return a `String` view name, or you can return a `ModelAndView` object that contains both the model attributes and the view name."
                },
                {
                    "id": "d2_q050_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "What is the file name for profile-specific properties for a 'development' profile?",
                    "options": [
                        "A) `application.dev`",
                        "B) `properties-dev.yml`",
                        "C) `application-development.properties`",
                        "D) `dev.properties`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The naming convention for profile-specific property files is `application-{profileName}.properties` or `application-{profileName}.yml`. For a profile named 'development', the file would be `application-development.properties`."
                },
                {
                    "id": "d2_q051_s2",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "How do you run a JUnit 5 test with the Spring Test framework?",
                    "options": [
                        "A) By annotating the test class with `@RunWith(SpringRunner.class)`",
                        "B) By annotating the test class with `@ExtendWith(SpringExtension.class)`",
                        "C) By implementing the `SpringTest` interface.",
                        "D) It works automatically with no extra annotations."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "For JUnit 5, you use the `@ExtendWith(SpringExtension.class)` annotation to integrate the Spring TestContext Framework. `@RunWith(SpringRunner.class)` is the older mechanism used for JUnit 4."
                },
                {
                    "id": "d2_q052_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Hard",
                    "question_text": "What is a `FactoryBean` in Spring?",
                    "options": [
                        "A) A factory for creating beans programmatically.",
                        "B) A special type of bean that acts as a factory for creating other objects. The bean itself is not what's exposed, but the object it creates.",
                        "C) A bean that is created in a factory.",
                        "D) A design pattern for building beans."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `FactoryBean` is an indirection. When you ask the container for a bean of type `T` that is a `FactoryBean`, you don't get the factory instance itself; you get the object that the factory's `getObject()` method returns. It's used for complex initializations."
                },
                {
                    "id": "d2_q053_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which annotation do you use to specify a one-to-many relationship between two entities?",
                    "options": [
                        "A) `@OneToMany`",
                        "B) `@ManyToOne`",
                        "C) `@OneToOne`",
                        "D) `@ManyToMany`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`@OneToMany` is used on the 'one' side of the relationship (e.g., a `User` has a `List<Post>`). The corresponding `@ManyToOne` annotation would be used on the 'many' side (a `Post` has one `User`)."
                },
                {
                    "id": "d2_q054_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of an `HttpMessageConverter`?",
                    "options": [
                        "A) To convert HTTP versions (e.g., 1.1 to 2.0).",
                        "B) To convert an HTTP request body to a Java object and a Java object back to a response body.",
                        "C) To convert servlets to reactive handlers.",
                        "D) To convert messages for WebSockets."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`HttpMessageConverter`s are a key part of Spring MVC. For example, `MappingJackson2HttpMessageConverter` is responsible for reading JSON from a request and writing JSON in a response. Spring configures a list of these by default."
                },
                {
                    "id": "d2_q055_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "Which starter would you add to your `pom.xml` to build a command-line application that is not a web application?",
                    "options": [
                        "A) `spring-boot-starter-web`",
                        "B) `spring-boot-starter`",
                        "C) `spring-boot-starter-cli`",
                        "D) `spring-boot-starter-batch`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `spring-boot-starter` is the core starter, containing auto-configuration, logging, and YAML support, but without any web server or other specific functionality. It's the perfect base for a non-web application."
                },
                {
                    "id": "d2_q056_s2",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "What is the role of Spring Cloud Gateway?",
                    "options": [
                        "A) To provide a database gateway.",
                        "B) To provide a reactive, intelligent, and programmable API Gateway for a microservices architecture.",
                        "C) To manage payments through a payment gateway.",
                        "D) To provide a gateway for messaging systems."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Cloud Gateway acts as the single entry point for all client requests. It can route requests to appropriate microservices, enforce security (like rate limiting), and handle cross-cutting concerns, all in a non-blocking, reactive manner."
                },
                {
                    "id": "d2_q057_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is a 'projection' in Spring Data?",
                    "options": [
                        "A) A way to project your screen during a presentation.",
                        "B) A feature that allows you to retrieve only a subset of an entity's attributes from the database.",
                        "C) A tool for projecting future data trends.",
                        "D) A type of database join."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Instead of fetching a full entity with all its columns, you can define an interface-based or class-based projection to select only the specific fields you need. This can significantly improve performance by reducing the amount of data transferred from the database."
                },
                {
                    "id": "d2_q058_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@ModelAttribute` annotation?",
                    "options": [
                        "A) To bind a method parameter or method return value to a named model attribute, exposed to a web view.",
                        "B) To define the model class for a controller.",
                        "C) To set attributes on the application context.",
                        "D) To define the data transfer object for a REST API."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`@ModelAttribute` can be used on a method to pre-populate the model before the handler method is called, or on a method argument to bind form data. It's primarily used in traditional Spring MVC with server-side views."
                },
                {
                    "id": "d2_q059_s2",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "What does CSRF stand for in the context of web security?",
                    "options": [
                        "A) Client-Side Rendering Framework",
                        "B) Cross-Site Request Forgery",
                        "C) Central Security & Role Foundation",
                        "D) Coded-Source Reference File"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Cross-Site Request Forgery is an attack that tricks a user into submitting a malicious request. Spring Security has built-in protection against CSRF, which is enabled by default for state-changing HTTP methods (POST, PUT, DELETE)."
                },
                {
                    "id": "d2_q060_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "How does Spring Boot's 'fat JAR' (or executable JAR) work?",
                    "options": [
                        "A) It uses a custom ClassLoader to load nested JAR files from within the main JAR.",
                        "B) It extracts all dependencies to a temporary folder at runtime.",
                        "C) It combines all class files into a single large package.",
                        "D) It requires a special JVM to run."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `spring-boot-loader` module provides a special launcher and `LaunchedURLClassLoader` that know how to load classes and resources from the nested dependency JARs located inside the `BOOT-INF/lib` directory of the executable JAR."
                },
                {
                    "id": "d2_q061_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which property do you set to specify the JPA provider's dialect (e.g., for MySQL)?",
                    "options": [
                        "A) `spring.jpa.database-platform`",
                        "B) `spring.jpa.properties.hibernate.dialect`",
                        "C) Both A and B are valid and A is a shortcut for B.",
                        "D) Spring Boot detects this automatically and it cannot be set."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "While Spring Boot can often auto-detect the dialect from the JDBC driver, you can explicitly set it using `spring.jpa.database-platform` (e.g., `org.hibernate.dialect.MySQLDialect`), which is a Spring Boot-specific shortcut for the underlying Hibernate property."
                },
                {
                    "id": "d2_q062_s2",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to declare a class as a configuration class?",
                    "options": [
                        "A) `@Bean`",
                        "B) `@Component`",
                        "C) `@Configuration`",
                        "D) `@ComponentScan`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@Configuration` indicates that a class declares one or more `@Bean` methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime."
                },
                {
                    "id": "d2_q063_s2",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to extract a header value from an HTTP request?",
                    "options": [
                        "A) `@Header`",
                        "B) `@RequestHeader`",
                        "C) `@Param`",
                        "D) `@CookieValue`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@RequestHeader` annotation binds a method parameter to a request header value. It's useful for reading headers like `Authorization`, `Accept`, or custom headers."
                },
                {
                    "id": "d2_q064_s2",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between `save()` and `saveAndFlush()` in `JpaRepository`?",
                    "options": [
                        "A) There is no difference.",
                        "B) `save()` queues the entity for insertion/update, while `saveAndFlush()` forces the changes to be written to the database immediately.",
                        "C) `saveAndFlush()` is deprecated.",
                        "D) `save()` returns the saved entity, but `saveAndFlush()` does not."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Hibernate may batch changes in memory and only send them to the database at the end of the transaction. `save()` just makes the entity managed by the persistence context. `saveAndFlush()` forces a flush of the persistence context, synchronizing the changes to the database right away."
                },
                {
                    "id": "d2_q065_s2",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the primary way to create a custom Spring Boot starter?",
                    "options": [
                        "A) By creating a JAR file with a `spring.factories` file in `META-INF` to list auto-configuration classes.",
                        "B) By creating a JAR file with a `pom.xml` that includes other starters.",
                        "C) By creating a JAR that has a `spring.properties` file in its root.",
                        "D) Both A and B are key parts of creating a starter."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "A custom starter typically consists of two parts: an 'auto-configure' module with the auto-configuration logic (using `spring.factories`), and a 'starter' module that provides a convenient dependency descriptor (`pom.xml`) to pull in the auto-configure module and other necessary libraries."
                }
            ]
        },
        {
            "name": "Practice Set 5",
            "questions": [
                {
                    "id": "d3_q001_s3",
                    "domain": "Spring Boot WebFlux",
                    "difficulty": "Hard",
                    "question_text": "In a reactive Spring WebFlux application, what is the primary role of a `ServerCodecConfigurer` bean?",
                    "options": [
                        "A) To configure the underlying Netty server's thread pool.",
                        "B) To customize the readers and writers used for serializing and deserializing HTTP request and response bodies.",
                        "C) To define global CORS configuration for all endpoints.",
                        "D) To register custom filters for the reactive web filter chain."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `ServerCodecConfigurer` provides a way to customize or replace the default `HttpMessageReader`s and `HttpMessageWriter`s, allowing fine-grained control over how request payloads are decoded and response payloads are encoded (e.g., setting custom Jackson properties)."
                },
                {
                    "id": "d3_q002_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@EnableJpaAuditing` annotation?",
                    "options": [
                        "A) It enables the Actuator's `/auditevents` endpoint.",
                        "B) It automatically populates entity fields annotated with `@CreatedBy`, `@CreatedDate`, `@LastModifiedBy`, and `@LastModifiedDate`.",
                        "C) It enables logging of all JPA-related activities for auditing purposes.",
                        "D) It enables versioning of entities using the `@Version` annotation."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When combined with a bean that implements `AuditorAware`, `@EnableJpaAuditing` provides a declarative way to track who created/modified an entity and when, automatically setting fields like `@CreatedDate` and `@LastModifiedBy`."
                },
                {
                    "id": "d3_q003_s3",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "When using Testcontainers with `@SpringBootTest`, why is `@DynamicPropertySource` preferred over setting properties in `@TestPropertySource` for connecting to a container?",
                    "options": [
                        "A) `@TestPropertySource` cannot override properties for tests.",
                        "B) `@DynamicPropertySource` allows setting properties from a container whose ports and connection details are only known at runtime.",
                        "C) `@DynamicPropertySource` runs before the test context is created.",
                        "D) `@TestPropertySource` is deprecated in favor of `@DynamicPropertySource`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Testcontainers often start on a random port. `@DynamicPropertySource` provides a static method that is invoked after the container starts but before the context is refreshed, allowing you to dynamically get the container's URL, username, etc., and set them as properties for the `DataSource`."
                },
                {
                    "id": "d3_q004_s3",
                    "domain": "Spring Native",
                    "difficulty": "Hard",
                    "question_text": "What is an AOT (Ahead-of-Time) hint file in the context of Spring Native?",
                    "options": [
                        "A) A file that provides hints to the JVM's JIT compiler for runtime optimization.",
                        "B) A configuration file that tells the GraalVM native-image compiler about the application's use of reflection, proxies, and resources.",
                        "C) A file that contains pre-compiled native code for specific libraries.",
                        "D) A file used by Spring Boot DevTools to speed up restarts."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "GraalVM's native-image compilation requires a closed-world assumption. Since Spring uses dynamic features like reflection, hint files (`reflect-config.json`, `proxy-config.json`) are necessary to inform the AOT compiler which classes and methods need to be accessible via reflection at runtime."
                },
                {
                    "id": "d3_q005_s3",
                    "domain": "Spring Batch",
                    "difficulty": "Medium",
                    "question_text": "In Spring Batch, what is the responsibility of an `ItemProcessor`?",
                    "options": [
                        "A) To read data from a source like a file or database.",
                        "B) To write processed data to a destination.",
                        "C) To perform a transformation or apply business logic to an item read by an `ItemReader`.",
                        "D) To manage the state and restartability of a batch job."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "In a typical chunk-oriented step, the flow is Reader -> Processor -> Writer. The `ItemProcessor` sits in the middle, taking one item at a time from the reader, transforming it (e.g., converting data types, enriching data), and passing the result to the writer. It can also return null to filter out an item."
                },
                {
                    "id": "d3_q006_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "In modern Spring Security, what is the role of an `AuthorizationManager`?",
                    "options": [
                        "A) It manages the lifecycle of `Authentication` objects.",
                        "B) It is a replacement for `UserDetailsService` to load user data.",
                        "C) It is the central component for making 'permit' or 'deny' access-control decisions, replacing the older `AccessDecisionManager` and `AccessDecisionVoter`s.",
                        "D) It manages the storage and retrieval of security configurations from a database."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `AuthorizationManager` interface is the modern, consolidated approach for authorization. Implementations of this interface contain the logic to decide if a given `Authentication` principal is permitted to access a secure object (like an HTTP request or a method invocation)."
                },
                {
                    "id": "d3_q007_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the primary difference between `PESSIMISTIC_WRITE` and `PESSIMISTIC_READ` lock modes in JPA?",
                    "options": [
                        "A) `PESSIMISTIC_WRITE` locks the entire table, while `PESSIMISTIC_READ` only locks the row.",
                        "B) `PESSIMISTIC_WRITE` obtains an exclusive lock preventing reads and writes, while `PESSIMISTIC_READ` obtains a shared lock allowing other transactions to read but not write.",
                        "C) `PESSIMISTIC_READ` is for read-only transactions, while `PESSIMISTIC_WRITE` is for read-write transactions.",
                        "D) There is no functional difference; they are aliases."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `PESSIMISTIC_WRITE` lock is exclusive (`SELECT ... FOR UPDATE`), preventing any other transaction from reading or writing the locked data. A `PESSIMISTIC_READ` lock is shared (`SELECT ... FOR SHARE` in some dialects), allowing other transactions to read the data but not to acquire a write lock on it."
                },
                {
                    "id": "d3_q008_s3",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "What problem does Spring Cloud Sleuth primarily solve in a microservices architecture?",
                    "options": [
                        "A) Centralized configuration management.",
                        "B) Service discovery.",
                        "C) Client-side load balancing.",
                        "D) Distributed tracing to track requests across multiple services."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Cloud Sleuth adds unique trace and span IDs to logs as requests pass through different microservices. This allows for centralized log aggregation tools (like Zipkin or Jaeger) to stitch together a complete picture of a single request's journey."
                },
                {
                    "id": "d3_q009_s3",
                    "domain": "Spring Boot Caching",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@CacheEvict` annotation in Spring's cache abstraction?",
                    "options": [
                        "A) To add an item to the cache.",
                        "B) To retrieve an item from the cache.",
                        "C) To trigger the removal of one or more entries from a cache.",
                        "D) To define the configuration for a cache."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@CacheEvict` is used to signal that a method execution should lead to the removal of data from the cache. You can evict a single entry based on a key or clear all entries in the cache using `allEntries = true`."
                },
                {
                    "id": "d3_q010_s3",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the key difference between a `BeanPostProcessor` and a `BeanFactoryPostProcessor`?",
                    "options": [
                        "A) `BeanPostProcessor` operates on bean instances, while `BeanFactoryPostProcessor` operates on bean definitions.",
                        "B) `BeanFactoryPostProcessor` operates on bean instances, while `BeanPostProcessor` operates on bean definitions.",
                        "C) They are functionally identical but have different names for semantic clarity.",
                        "D) `BeanPostProcessor` is for web applications, while `BeanFactoryPostProcessor` is for standalone applications."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "A `BeanFactoryPostProcessor` is executed early in the lifecycle, allowing it to read and modify the configuration metadata (the bean definitions) before any beans are actually created. A `BeanPostProcessor` is executed later, operating on the actual bean instances after they have been created, allowing for tasks like proxying."
                },
                {
                    "id": "d3_q011_s3",
                    "domain": "Spring Integration",
                    "difficulty": "Hard",
                    "question_text": "In Spring Integration, what is the role of a `Channel Adapter`?",
                    "options": [
                        "A) To transform a message payload from one format to another.",
                        "B) To route a message to one of several channels based on a condition.",
                        "C) To connect a Spring Integration message channel to an external system or transport (e.g., JMS, Kafka, File System).",
                        "D) To split a single message into multiple messages."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Channel Adapters are the components responsible for integration with the outside world. An inbound channel adapter receives data from an external system and creates a message to send to a channel. An outbound channel adapter receives a message from a channel and sends it to an external system."
                },
                {
                    "id": "d3_q012_s3",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "How can you create a custom health indicator for the Actuator `/health` endpoint?",
                    "options": [
                        "A) By implementing the `HealthContributor` interface.",
                        "B) By creating a bean that implements the `HealthIndicator` interface.",
                        "C) By setting properties prefixed with `management.health.custom.*`.",
                        "D) By annotating a service with `@CustomHealthCheck`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "To add a custom check to the `/health` endpoint, you create a Spring bean that implements the `HealthIndicator` interface. This bean must implement the `health()` method, which returns a `Health` object containing the status (e.g., UP, DOWN) and optional details."
                },
                {
                    "id": "d3_q013_s3",
                    "domain": "Spring Boot GraphQL",
                    "difficulty": "Hard",
                    "question_text": "When using `spring-boot-starter-graphql`, how do you map a controller method to a GraphQL query field?",
                    "options": [
                        "A) Using `@QueryMapping`",
                        "B) Using `@GetMapping`",
                        "C) Using `@GraphQLQuery`",
                        "D) By naming the method the same as the schema field."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The Spring for GraphQL project uses annotations to bind controller methods to the GraphQL schema. `@QueryMapping` is used for fields under the `Query` type, `@MutationMapping` for fields under `Mutation`, and `@SchemaMapping` for fields on other types."
                },
                {
                    "id": "d3_q014_s3",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring.mvc.pathmatch.matching-strategy` property?",
                    "options": [
                        "A) To define the load balancing strategy.",
                        "B) To switch between the `ant_path_matcher` and the more modern `path_pattern_parser` for URL matching in Spring MVC.",
                        "C) To configure the strategy for matching media types.",
                        "D) To set the matching strategy for bean names during autowiring."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Framework 5.3 introduced `PathPatternParser` as a more performant alternative to the traditional `AntPathMatcher`. This property allows you to switch between the two, with `path_pattern_parser` being the default in Spring Boot 2.6 and later."
                },
                {
                    "id": "d3_q015_s3",
                    "domain": "Spring Boot R2DBC",
                    "difficulty": "Hard",
                    "question_text": "What is a major difference between Spring Data JPA and Spring Data R2DBC?",
                    "options": [
                        "A) R2DBC does not support transactions.",
                        "B) R2DBC is a reactive, non-blocking specification for database access, whereas JPA is blocking.",
                        "C) JPA can only be used with Hibernate, while R2DBC supports any database.",
                        "D) R2DBC does not require a `DataSource` to be configured."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The core difference is the programming model. JPA is based on the blocking JDBC API. R2DBC (Reactive Relational Database Connectivity) provides a fully reactive API, integrating with reactive streams publishers like `Mono` and `Flux`, making it suitable for end-to-end reactive applications."
                },
                {
                    "id": "d3_q016_s3",
                    "domain": "Spring Boot Deployment",
                    "difficulty": "Medium",
                    "question_text": "In a Dockerfile for a Spring Boot application, what is the benefit of using a multi-stage build?",
                    "options": [
                        "A) It allows the application to run on multiple operating systems.",
                        "B) It creates a smaller final image by separating the build environment (with Maven/Gradle and the JDK) from the runtime environment (with only the JRE and the application JAR).",
                        "C) It automatically builds the application for different CPU architectures.",
                        "D) It enables running multiple Spring Boot applications in a single container."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A multi-stage build uses one stage with a full JDK and build tools to compile and package the application, and then a second, clean stage copies only the final JAR from the build stage. This results in a minimal, more secure runtime image without build-time dependencies."
                },
                {
                    "id": "d3_q017_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "In Spring Security, what is the purpose of the `@PreAuthorize` annotation?",
                    "options": [
                        "A) To execute code before a user is authenticated.",
                        "B) To declare that a method requires authorization and to specify the security expression that must be true for the method to be invoked.",
                        "C) To pre-load user permissions into the cache.",
                        "D) To authorize a request before it reaches the controller."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@PreAuthorize` enables method-level security. It uses Spring Expression Language (SpEL) to perform authorization checks before the annotated method is executed (e.g., `@PreAuthorize(\"hasRole('ADMIN')\")`)."
                },
                {
                    "id": "d3_q018_s3",
                    "domain": "Spring Cloud Gateway",
                    "difficulty": "Hard",
                    "question_text": "What is a `GlobalFilter` in Spring Cloud Gateway?",
                    "options": [
                        "A) A filter that is applied to all routes in the gateway.",
                        "B) A filter that enables global exception handling.",
                        "C) A filter that can be applied to routes dynamically based on properties.",
                        "D) A filter that connects the gateway to a global load balancer."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "A `GlobalFilter` is a type of filter in Spring Cloud Gateway that is conditionally applied to every route. You can control its order relative to other filters. Examples include the load balancing filter and the WebSocket routing filter."
                },
                {
                    "id": "d3_q019_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "In Spring Data JPA, what is a 'projection'?",
                    "options": [
                        "A) A way to project database results onto a screen.",
                        "B) A feature that allows a query to return a custom, limited view of an entity (e.g., an interface with a subset of getters) instead of the full entity.",
                        "C) A projection of future database growth.",
                        "D) An alias for a native SQL query."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Projections are used to improve query performance by selecting only the necessary columns from the database. You can define an interface with getter methods matching the desired entity properties, and Spring Data will automatically create an implementation that fetches only that data."
                },
                {
                    "id": "d3_q020_s3",
                    "domain": "Spring Framework",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of `@AliasFor` annotation?",
                    "options": [
                        "A) To create an alias for a bean name.",
                        "B) To declare that an annotation attribute is an alias for an attribute in another annotation (a meta-annotation).",
                        "C) To define an alias for a URL path in a controller.",
                        "D) To create an alias for a property key in `application.properties`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@AliasFor` is a meta-annotation used when creating custom, composed annotations. It allows you to alias an attribute in your custom annotation to an attribute in one of its meta-annotations (e.g., aliasing a `path` attribute to the `value` attribute of `@RequestMapping`)."
                },
                {
                    "id": "d3_q021_s3",
                    "domain": "Spring Boot Caching",
                    "difficulty": "Hard",
                    "question_text": "When using `@Cacheable`, what is the purpose of the `unless` attribute?",
                    "options": [
                        "A) It specifies a condition that, if true, will prevent the method from being executed at all.",
                        "B) It defines a condition (using SpEL) that, if true, will prevent the method's result from being cached.",
                        "C) It defines a condition that must be true for the cache to be considered valid.",
                        "D) It specifies an alternate cache to use if the primary one is unavailable."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `unless` attribute takes a SpEL expression that is evaluated after the method has been called. If the expression evaluates to true, the return value will not be placed in the cache. It's useful for preventing the caching of certain results, like null values or specific error indicators."
                },
                {
                    "id": "d3_q022_s3",
                    "domain": "Spring Boot WebFlux",
                    "difficulty": "Medium",
                    "question_text": "In Project Reactor, which operator would you use to provide a default value if a `Mono` completes without emitting an item?",
                    "options": [
                        "A) `map()`",
                        "B) `filter()`",
                        "C) `switchIfEmpty()`",
                        "D) `doOnSuccess()`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`switchIfEmpty(Mono.just(defaultValue))` is the idiomatic way to handle an empty `Mono`. If the source `Mono` completes without emitting a value, this operator subscribes to the provided fallback `Mono`, effectively providing a default."
                },
                {
                    "id": "d3_q023_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is the primary purpose of a `SecurityContextRepository` in Spring Security?",
                    "options": [
                        "A) To store and retrieve user credentials.",
                        "B) To manage the storage and retrieval of the `SecurityContext` between HTTP requests.",
                        "C) To define the security rules for repository interfaces.",
                        "D) To store security audit events."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `SecurityContextRepository` is responsible for persistence of the `SecurityContext`. The default implementation for servlet applications, `HttpSessionSecurityContextRepository`, saves the context in the `HttpSession`. For stateless applications, you might provide a custom implementation that does not store anything."
                },
                {
                    "id": "d3_q024_s3",
                    "domain": "Spring Batch",
                    "difficulty": "Medium",
                    "question_text": "In a Spring Batch Job, what is a `Step`?",
                    "options": [
                        "A) A single line of code in the batch process.",
                        "B) An independent, sequential phase of a batch job that contains all the information necessary to define and control the actual batch processing.",
                        "C) A configuration property for the job.",
                        "D) A connection to a data source."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `Job` is made up of one or more `Step`s. Each `Step` is a self-contained domain object that encapsulates a distinct part of the batch process, such as reading data, processing it, and writing it (a chunk-oriented step), or executing a tasklet."
                },
                {
                    "id": "d3_q025_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of Hibernate's second-level cache?",
                    "options": [
                        "A) A cache for query results, shared across all sessions.",
                        "B) A cache for entity data that is shared across multiple sessions (or transactions) in the same `SessionFactory`.",
                        "C) A cache that is local to a single Hibernate `Session`.",
                        "D) A cache used by the database server itself."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The first-level cache is the session cache (local to a single session). The second-level cache is an optional cache plugged into the `SessionFactory`. It caches entity data that has been loaded from the database, making it available to all sessions created by that factory, which can reduce database hits."
                },
                {
                    "id": "d3_q026_s3",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "What does `@DirtiesContext` annotation signify in a Spring test?",
                    "options": [
                        "A) It indicates that the test contains dirty or poorly written code.",
                        "B) It indicates that the test modifies the `ApplicationContext` and the context should be closed and recreated for subsequent tests.",
                        "C) It injects a dirty, uninitialized bean into the test.",
                        "D) It cleans the database schema before the test runs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@DirtiesContext` is used when a test might modify the state of the application context (e.g., by changing a bean's property or adding a bean). It tells the testing framework to discard the context after the test completes, ensuring subsequent tests start with a clean context."
                },
                {
                    "id": "d3_q027_s3",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@Lazy` annotation on a bean?",
                    "options": [
                        "A) To make the bean's methods execute with a delay.",
                        "B) To indicate that the bean should be initialized only when it is first requested, rather than at application startup.",
                        "C) To mark a bean as low-priority for garbage collection.",
                        "D) To specify a lazy fetch type for a JPA relationship."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, singleton beans are created eagerly during application context initialization. Applying `@Lazy` to a bean definition defers its creation until it is first injected into another bean or explicitly retrieved from the context. This can help speed up application startup time."
                },
                {
                    "id": "d3_q028_s3",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "How can you add custom information to the Actuator `/info` endpoint from a Git repository?",
                    "options": [
                        "A) By implementing an `InfoContributor` that reads from a `.git` folder.",
                        "B) Spring Boot does this automatically if a `git.properties` file is present on the classpath.",
                        "C) By setting `management.info.git.enabled=true` and `management.info.git.mode=full`.",
                        "D) This requires a custom plugin and is not supported out-of-the-box."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "If you use the `git-commit-id-plugin` for Maven or Gradle, it will generate a `git.properties` file. If Spring Boot Actuator finds this file on the classpath, it will automatically expose the Git commit information (branch, commit ID, time) under the `/info` endpoint."
                },
                {
                    "id": "d3_q029_s3",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring.factories` file?",
                    "options": [
                        "A) It is a replacement for `application.properties` in older Spring Boot versions.",
                        "B) A mechanism for a library to register components (like auto-configurations or initializers) to be picked up by a Spring Boot application.",
                        "C) A file that lists all the beans created by the application.",
                        "D) A file used to configure factory beans."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Located in `META-INF/spring.factories`, this file is a key part of Spring Boot's auto-configuration mechanism. Libraries can list their `@Configuration` classes under the `org.springframework.boot.autoconfigure.EnableAutoConfiguration` key, and Spring Boot will consider them for auto-configuration."
                },
                {
                    "id": "d3_q030_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "What is the primary role of a `PasswordEncoder` in Spring Security?",
                    "options": [
                        "A) To encode URL parameters to make them safe.",
                        "B) To provide a one-way hash function for storing passwords securely.",
                        "C) To encrypt and decrypt sensitive data in the database.",
                        "D) To encode the session ID."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `PasswordEncoder` (like `BCryptPasswordEncoder`) is essential for security. It transforms a plain-text password into a hashed string that cannot be reversed. When a user tries to log in, the framework hashes the submitted password and compares it to the stored hash."
                },
                {
                    "id": "d3_q031_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "In a Spring Data JPA repository, what does the `@EntityGraph` annotation achieve?",
                    "options": [
                        "A) It generates a graph visualization of the entity relationships.",
                        "B) It specifies which associated entities to fetch eagerly for a given query, overriding the default fetch plan and helping to solve the N+1 problem.",
                        "C) It enables graph database features for a relational entity.",
                        "d) To configure a transactional boundary for the repository."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@EntityGraph` allows you to define a graph of associations to be fetched eagerly in a single `SELECT` statement. This is a powerful optimization for avoiding the N+1 select problem, where fetching N parent entities results in N additional queries to fetch their children."
                },
                {
                    "id": "d3_q032_s3",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of a `@ControllerAdvice` class?",
                    "options": [
                        "A) To provide advice and tips for writing better controllers.",
                        "B) A class that allows you to share exception handling, data binding, and model attributes across multiple controllers.",
                        "C) To configure the web server for all controllers.",
                        "D) An aspect that advises controller execution for logging."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A class annotated with `@ControllerAdvice` can contain methods annotated with `@ExceptionHandler`, `@InitBinder`, and `@ModelAttribute`. These methods will be applied globally to all controllers, providing a centralized place for cross-cutting concerns like exception handling."
                },
                {
                    "id": "d3_q033_s3",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How can you create a custom annotation that acts as a shortcut for `@Service`?",
                    "options": [
                        "A) By creating a new interface that extends the `Service` interface.",
                        "B) It is not possible to create custom stereotype annotations.",
                        "C) By creating a new annotation and meta-annotating it with `@Service`.",
                        "D) By using XML configuration to define an alias."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "You can create custom stereotype annotations by meta-annotating your new annotation. For example, creating `@MyService` and annotating it with `@Service` will make Spring treat any class annotated with `@MyService` as a service bean."
                },
                {
                    "id": "d3_q034_s3",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "In Spring Cloud Circuit Breaker with Resilience4j, what does the `slidingWindowSize` property configure?",
                    "options": [
                        "A) The number of seconds the circuit remains open.",
                        "B) The size of the thread pool used by the circuit breaker.",
                        "C) The number of calls that are recorded to calculate the failure rate when the circuit is closed.",
                        "D) The maximum number of concurrent requests allowed."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `slidingWindowSize` property defines how many recent calls are aggregated to determine the health of the downstream service. The failure rate is calculated based on the outcomes of the calls within this sliding window."
                },
                {
                    "id": "d3_q035_s3",
                    "domain": "Spring Boot Messaging",
                    "difficulty": "Hard",
                    "question_text": "When using `spring-boot-starter-amqp` for RabbitMQ, what does the `@RabbitListener` annotation do?",
                    "options": [
                        "A) It configures a connection factory for RabbitMQ.",
                        "B) It sends a message to a RabbitMQ exchange.",
                        "C) It marks a method to be the receiver of messages from a specified RabbitMQ queue.",
                        "D) It creates a new RabbitMQ queue."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@RabbitListener` is the core annotation for creating a message-driven POJO. It creates a message listener container that listens to the specified queue(s) and invokes the annotated method whenever a message arrives."
                },
                {
                    "id": "d3_q036_s3",
                    "domain": "Spring Boot WebFlux",
                    "difficulty": "Hard",
                    "question_text": "What is 'backpressure' in the context of reactive streams (and Spring WebFlux)?",
                    "options": [
                        "A) The pressure exerted on the server by a high volume of requests.",
                        "B) A mechanism where a subscriber can control the rate at which a publisher sends data, preventing the subscriber from being overwhelmed.",
                        "C) A security feature to push back against denial-of-service attacks.",
                        "D) The process of applying pressure to compress response data."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Backpressure is a fundamental concept in reactive programming. It allows a consumer (subscriber) to signal to a producer (publisher) how much data it is ready to handle. This flow control prevents buffer overflows and system instability when a fast publisher sends data to a slower consumer."
                },
                {
                    "id": "d3_q037_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@NamedQuery` annotation in JPA?",
                    "options": [
                        "A) To provide a name for a repository interface.",
                        "B) To define a static, named JPQL or native query at the entity level, which can be referenced by its name later.",
                        "C) To name the parameters within a `@Query` annotation.",
                        "D) To create a query based on the method name."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@NamedQuery` (or `@NamedQueries`) is a standard JPA annotation used on an entity class to pre-define queries. These queries are parsed at application startup for validity and can be invoked from a repository by name, which can be slightly more efficient than parsing `@Query` annotations at runtime."
                },
                {
                    "id": "d3_q038_s3",
                    "domain": "Spring Boot Deployment",
                    "difficulty": "Medium",
                    "question_text": "In a Kubernetes manifest for a Spring Boot app, what is the function of a 'Readiness Probe'?",
                    "options": [
                        "A) To check if the application's source code is ready to be compiled.",
                        "B) To determine if the container should be restarted.",
                        "C) To determine if the application inside the container is ready to start accepting traffic.",
                        "D) To probe the readiness of the underlying Kubernetes node."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "A Readiness Probe periodically checks an endpoint (like Actuator's `/health/readiness`). If the probe fails, Kubernetes knows the app is not ready for new requests and temporarily removes its pod from the service's load-balancing pool. This is crucial for zero-downtime deployments."
                },
                {
                    "id": "d3_q039_s3",
                    "domain": "Spring Security",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `and()` method in the `HttpSecurity` configuration chain?",
                    "options": [
                        "A) To combine two different security rules with a logical AND.",
                        "B) It is a syntactic element that allows you to move back to the main `HttpSecurity` object to configure another feature, effectively ending the configuration of a sub-feature.",
                        "C) To specify that a user must have two different roles.",
                        "D) To chain multiple authentication providers together."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `HttpSecurity` configuration uses a fluent builder pattern. After configuring a specific aspect (e.g., `.formLogin()`), the `and()` method returns to the parent `HttpSecurity` configurer, allowing you to chain the configuration of another aspect (e.g., `.and().authorizeRequests()`)."
                },
                {
                    "id": "d3_q040_s3",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the difference between `@ComponentScan` and `@EnableAutoConfiguration`?",
                    "options": [
                        "A) They are the same; `@ComponentScan` is just an alias.",
                        "B) `@ComponentScan` tells Spring where to look for your own beans (@Component, @Service), while `@EnableAutoConfiguration` enables Spring Boot's mechanism for configuring beans based on classpath dependencies.",
                        "C) `@EnableAutoConfiguration` scans for components, while `@ComponentScan` enables configuration properties.",
                        "D) `@ComponentScan` is for XML configuration, and `@EnableAutoConfiguration` is for Java configuration."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ComponentScan` is about finding your developer-defined beans. `@EnableAutoConfiguration` is about Spring Boot finding and applying its pre-packaged configuration classes based on the starters you've included in your project. `@SpringBootApplication` conveniently includes both."
                },
                {
                    "id": "d3_q041_s3",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "In a `@WebMvcTest`, what is the purpose of the `MockMvc` bean?",
                    "options": [
                        "A) To mock the entire Model-View-Controller pattern.",
                        "B) To provide a serverless way to send HTTP requests to your controllers and assert the responses.",
                        "C) To create mock instances of `@Service` beans.",
                        "D) To mock the `DispatcherServlet`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`MockMvc` allows you to test your controllers' request mappings, parameter binding, and response serialization without the overhead of starting a full HTTP server. You use it to perform mock requests and then use its fluent API to assert outcomes like status codes, headers, and response bodies."
                },
                {
                    "id": "d3_q042_s3",
                    "domain": "Spring Boot Caching",
                    "difficulty": "Medium",
                    "question_text": "What does `@EnableCaching` annotation do?",
                    "options": [
                        "A) It enables a distributed cache like Redis.",
                        "B) It enables Spring's cache abstraction layer, which scans for caching annotations like `@Cacheable` and `@CacheEvict`.",
                        "C) It enables browser-level caching for static resources.",
                        "D) It configures the Actuator cache endpoint."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@EnableCaching` on a configuration class bootstraps Spring's caching infrastructure. It activates a post-processor that inspects beans for caching annotations and wraps them with proxies that provide the caching behavior."
                },
                {
                    "id": "d3_q043_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Easy",
                    "question_text": "What is the default connection pool used by Spring Boot 2.x and later if `spring-boot-starter-data-jpa` or `spring-boot-starter-jdbc` is on the classpath?",
                    "options": [
                        "A) Tomcat JDBC Pool",
                        "B) c3p0",
                        "C) HikariCP",
                        "D) DBCP2"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot 2.0 switched the default connection pool from Tomcat JDBC to HikariCP due to its superior performance and reliability. Spring Boot will auto-configure it if HikariCP is on the classpath."
                },
                {
                    "id": "d3_q044_s3",
                    "domain": "Spring AOP",
                    "difficulty": "Medium",
                    "question_text": "What is a 'Pointcut expression' in Spring AOP?",
                    "options": [
                        "A) The code that gets executed by an advice.",
                        "B) A string expression that defines which method executions (join points) an advice should apply to.",
                        "C) The point in the code where an exception is thrown.",
                        "d) A configuration property for AOP."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A pointcut expression is a predicate that matches join points. For example, the expression `execution(* com.example.service.*.*(..))` matches the execution of any method in any class within the `com.example.service` package."
                },
                {
                    "id": "d3_q045_s3",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of `@ConditionalOnMissingBean` annotation?",
                    "options": [
                        "A) It ensures a bean is created only if another specific bean is missing.",
                        "B) It marks a bean as missing so it won't be created.",
                        "C) It is used in tests to verify that a bean is not present in the context.",
                        "D) It creates a bean only if the application is missing a required property."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "This is a key conditional annotation used in auto-configuration. It allows Spring Boot to define a default bean but back off and not create it if the developer has already defined their own bean of the same type in the `ApplicationContext`. This is how user configuration overrides Boot's defaults."
                },
                {
                    "id": "d3_q046_s3",
                    "domain": "Spring Cloud Gateway",
                    "difficulty": "Hard",
                    "question_text": "In Spring Cloud Gateway, what is the difference between a `Predicate` and a `Filter`?",
                    "options": [
                        "A) Filters define the routing condition, and Predicates modify the request/response.",
                        "B) Predicates define the routing condition (the 'if'), and Filters modify the request/response before or after routing (the 'then').",
                        "C) They are interchangeable concepts.",
                        "D) Predicates are for HTTP requests, and Filters are for WebSocket requests."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A route in Spring Cloud Gateway is defined by a set of Predicates and a set of Filters. The Predicates are used to match an incoming request (e.g., `Path=/api/**`, `Method=GET`). If all predicates for a route match, the request is handled by that route, and its associated Filters are applied to the request and/or response."
                },
                {
                    "id": "d3_q047_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "In an OAuth2 context, what is the 'authorization_code' grant type?",
                    "options": [
                        "A) A grant type where the client exchanges a username and password directly for an access token.",
                        "B) A flow where the client redirects a user to an authorization server to grant consent, receives an authorization code, and then exchanges that code for an access token.",
                        "C) A grant type for machine-to-machine communication where the client authenticates itself to get a token.",
                        "D) A simplified flow for single-page applications where the access token is returned directly in the URL fragment."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The Authorization Code grant is considered the most secure flow for traditional web applications. It involves redirecting the user's browser to the authorization server, and because the access token is exchanged on a back-channel, it is never exposed to the user's browser."
                },
                {
                    "id": "d3_q048_s3",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What does the `@CrossOrigin` annotation do?",
                    "options": [
                        "A) It enables cross-site scripting protection.",
                        "B) It enables Cross-Origin Resource Sharing (CORS) for a specific controller or method, allowing requests from different origins.",
                        "C) It encrypts the request and response bodies.",
                        "D) It configures the application to run across multiple data centers."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "CORS is a browser security feature that restricts cross-origin HTTP requests. `@CrossOrigin` is a simple way to add the necessary CORS response headers (like `Access-Control-Allow-Origin`) to allow web front-ends running on a different domain to call your API."
                },
                {
                    "id": "d3_q049_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring.jpa.open-in-view` property?",
                    "options": [
                        "A) It opens the database view in a separate window for inspection.",
                        "B) It keeps the JPA `EntityManager` open for the entire duration of a web request, allowing lazy-loading to work in the view layer.",
                        "C) It enables viewing JPA entities in a read-only mode.",
                        "D) It automatically creates database views based on entity relationships."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When true (the default in Spring Boot), this property binds a JPA `EntityManager` to the thread for the entire request. This can be convenient but is considered an anti-pattern as it can hide performance issues (N+1 selects) and hold database connections for longer than necessary."
                },
                {
                    "id": "d3_q050_s3",
                    "domain": "Spring Boot Observability",
                    "difficulty": "Hard",
                    "question_text": "In Micrometer, what is the difference between a `Counter` and a `Gauge`?",
                    "options": [
                        "A) A Counter can only be used for integers, while a Gauge can be used for floating-point numbers.",
                        "B) A Counter is a cumulative metric that only ever increases, while a Gauge is a value that can go up and down.",
                        "C) A Counter measures the rate of events, while a Gauge measures the total number of events.",
                        "D) They are the same, but Gauge is the preferred term."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `Counter` is for counting events, like the total number of requests received (it only goes up). A `Gauge` represents a value at a point in time, like the current number of active sessions or the size of a queue (it can arbitrarily increase and decrease)."
                },
                {
                    "id": "d3_q051_s3",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "Which property do you use to expose all Actuator web endpoints except the `/shutdown` endpoint?",
                    "options": [
                        "A) `management.endpoints.web.exposure.include=*`",
                        "B) `management.endpoints.web.exposure.include=*, management.endpoints.web.exposure.exclude=shutdown`",
                        "C) `management.endpoints.enabled-by-default=true`",
                        "D) `management.server.add-application-context-header=false`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `exposure` properties use a comma-separated list. You can use `*` to include all available endpoints and then use the `exclude` property to explicitly remove specific sensitive endpoints like `/shutdown`."
                },
                {
                    "id": "d3_q052_s3",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@RequestPart` annotation in a multipart request handler?",
                    "options": [
                        "A) It is an alias for `@RequestParam`.",
                        "B) It is used to bind a part of a `multipart/form-data` request, which could be a file (`MultipartFile`) or regular form field data.",
                        "C) It is used to get a part of the URL path.",
                        "D) It specifies which part of the application will handle the request."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "When handling file uploads or other multipart requests, `@RequestPart` is used to access individual 'parts' of the request body by their name, as defined in the `Content-Disposition` of that part. It allows for type conversion of non-file parts (e.g., JSON)."
                },
                {
                    "id": "d3_q053_s3",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What does it mean for a Spring bean to be 'thread-safe'?",
                    "options": [
                        "A) The bean can only be accessed by a single thread.",
                        "B) The bean's methods are all marked as `synchronized`.",
                        "C) The bean's internal state is not corrupted when it is accessed concurrently by multiple threads.",
                        "D) Spring automatically makes all beans thread-safe."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring does not make beans thread-safe. Singleton beans (the default scope) are shared across all threads. If a singleton bean has mutable state (instance variables), the developer is responsible for ensuring that concurrent access to that state is handled correctly (e.g., using synchronization or thread-safe data structures)."
                },
                {
                    "id": "d3_q054_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the `spring.sql.init.mode` property used for?",
                    "options": [
                        "A) To initialize the Spring Integration context.",
                        "B) To configure when to run database initialization scripts (`schema.sql`, `data.sql`).",
                        "C) To set the initialization mode for the JPA `EntityManager`.",
                        "D) To define the transaction isolation level for SQL statements."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This property controls the execution of SQL scripts. It can be set to `always`, `embedded` (only for embedded databases, the default), or `never`. It provides more explicit control over database initialization than the older `spring.datasource.initialization-mode` property."
                },
                {
                    "id": "d3_q055_s3",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "In Spring Security, what is the purpose of a `Filter` chain?",
                    "options": [
                        "A) A chain of database queries to authenticate a user.",
                        "B) An ordered list of `ServletFilter` beans that are applied to incoming web requests to perform security checks.",
                        "C) A mechanism for filtering out unwanted characters from user input.",
                        "D) A chain of command-line arguments for security."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Security is fundamentally based on a chain of servlet filters. Each filter has a specific responsibility (e.g., CSRF protection, handling basic authentication, processing session information). The request passes through this chain, and if any filter determines that access should be denied, it stops the processing."
                },
                {
                    "id": "d3_q056_s3",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the primary benefit of using YAML (`.yml`) over `.properties` files for configuration?",
                    "options": [
                        "A) YAML files are compiled, making them faster to load.",
                        "B) YAML files support a hierarchical structure, which is often more readable for complex configurations.",
                        "C) Only YAML files can be used with Spring profiles.",
                        "D) YAML files have higher precedence than `.properties` files."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The key advantage of YAML is its ability to represent structured, nested data in a clean, indented format. This is a natural fit for mapping to `@ConfigurationProperties` objects. A `.properties` file would require repetitive prefixes (e.g., `server.ssl.key-store`) to achieve the same structure."
                },
                {
                    "id": "d3_q057_s3",
                    "domain": "Spring Integration",
                    "difficulty": "Hard",
                    "question_text": "What is a `MessageChannel` in Spring Integration?",
                    "options": [
                        "A) A UI component for displaying messages.",
                        "B) A component that represents the 'pipe' through which messages are sent from one endpoint to another.",
                        "C) An adapter for connecting to a chat application.",
                        "D) A specific type of message payload."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`MessageChannel` is a core concept that decouples message producers from message consumers. Producers send `Message` objects to a channel, and consumers receive messages from a channel, without either having a direct reference to the other."
                },
                {
                    "id": "d3_q058_s3",
                    "domain": "Spring Boot WebFlux",
                    "difficulty": "Hard",
                    "question_text": "When using `WebClient`, what is the purpose of the `.retrieve()` method?",
                    "options": [
                        "A) To execute the request and retrieve the full `ClientResponse` object, including status and headers.",
                        "B) To execute the request and immediately convert the response body to a `Mono` or `Flux`.",
                        "C) To retrieve the request configuration before sending it.",
                        "D) To retrieve a value from a cache before making the request."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`.retrieve()` is a shortcut method that is convenient for handling successful responses. It will automatically check for 4xx/5xx status codes and signal an error if one is found. For more control over the response, including error handling, you should use `.exchangeToMono()` or `.exchangeToFlux()` instead."
                },
                {
                    "id": "d3_q059_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What does the `@Transactional(readOnly = true)` attribute do?",
                    "options": [
                        "A) It makes the entire database read-only.",
                        "B) It signals to the persistence provider that the transaction will not perform any updates, allowing for potential optimizations.",
                        "C) It prevents the method from reading any data from the database.",
                        "D) It ensures the transaction can only be read by one thread at a time."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Marking a transaction as `readOnly` is a hint to the underlying transaction manager and JPA provider. It can enable optimizations like setting the JDBC connection to read-only or disabling dirty checking in Hibernate, which can improve performance for read-heavy operations."
                },
                {
                    "id": "d3_q060_s3",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is the primary use case for `@JsonTest` annotation?",
                    "options": [
                        "A) To test a full REST controller that returns JSON.",
                        "B) To perform focused tests on the serialization and deserialization of a single JSON object, without loading the web layer.",
                        "C) To test the performance of JSON processing.",
                        "D) To validate that all `.json` files in a project have correct syntax."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@JsonTest` is a slice annotation that loads only the JSON-related infrastructure (like Jackson `ObjectMapper`). It provides `JacksonTester` utility classes that make it easy to write unit tests for your DTOs, asserting that they serialize to and deserialize from JSON as expected."
                },
                {
                    "id": "d3_q061_s3",
                    "domain": "Spring Native",
                    "difficulty": "Hard",
                    "question_text": "Which of the following is a significant limitation when using Spring Native and GraalVM?",
                    "options": [
                        "A) It does not support dependency injection.",
                        "B) The application's heavy reliance on runtime reflection, proxies, and classpath scanning requires explicit configuration hints for the AOT compiler.",
                        "C) It can only be deployed on Linux.",
                        "D) It produces larger JAR files than a traditional Spring Boot application."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "GraalVM's AOT compilation needs to know everything at build time. Spring's dynamic nature means that some reflection or proxy usage might not be detectable by static analysis. Therefore, developers often need to provide hint files to ensure these dynamic features work in the final native executable."
                },
                {
                    "id": "d3_q062_s3",
                    "domain": "Spring Batch",
                    "difficulty": "Medium",
                    "question_text": "What is the role of the `JobRepository` in Spring Batch?",
                    "options": [
                        "A) A repository for storing the application's business data.",
                        "B) A component that provides CRUD operations for the meta-data of batch jobs, such as their state, start/end times, and step executions.",
                        "C) A repository for storing the Java code of batch jobs.",
                        "D) A component that launches batch jobs."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `JobRepository` is the persistence mechanism for the batch framework itself. It stores the state of `JobExecution` and `StepExecution` objects, which is crucial for features like monitoring, restartability, and understanding job history."
                },
                {
                    "id": "d3_q063_s3",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "When using Micrometer, what is the purpose of a `MeterBinder`?",
                    "options": [
                        "A) To bind a meter to a specific endpoint.",
                        "B) An interface that allows for the programmatic registration of one or more metrics with the `MeterRegistry` in a centralized way.",
                        "C) To bind a metric's value to a configuration property.",
                        "D) To define the visual appearance of a meter in Grafana."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `MeterBinder` is a callback interface that allows you to encapsulate the registration of custom metrics. You implement the `bindTo(MeterRegistry registry)` method, and Spring will automatically call it, passing the registry. This is a clean way to organize metric registration."
                },
                {
                    "id": "d3_q064_s3",
                    "domain": "Spring Security",
                    "difficulty": "Hard",
                    "question_text": "How can you get access to the `HttpServletRequest` object within a SpEL expression in `@PreAuthorize`?",
                    "options": [
                        "A) By using `#request` or by referencing a method parameter of type `HttpServletRequest` by its name.",
                        "B) It is not possible to access the request object directly.",
                        "C) By calling `SecurityContextHolder.getRequest()`.",
                        "D) By using the `@RequestObject` annotation in the expression."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "Spring Security's method security expression handler automatically makes certain variables available, including the request object if it's available. You can also directly reference method arguments by prefixing their name with a `#`, for example, `@PreAuthorize(\"#request.getHeader('X-Tenant-ID') == '123'\")`."
                },
                {
                    "id": "d3_q065_s3",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@ElementCollection` annotation in JPA?",
                    "options": [
                        "A) To mark a collection as the primary data source.",
                        "B) To define a collection of basic types or embeddable classes as a one-to-many relationship stored in a separate table, without the collection's elements being entities themselves.",
                        "C) To collect all entities into a single list.",
                        "D) To specify that the collection should be fetched eagerly."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ElementCollection` is used for mapping collections of non-entity types (like a `List<String>` or a `Set<Address>` where `Address` is an `@Embeddable`). JPA will manage this by creating a separate collection table linked back to the parent entity's primary key."
                }
            ]
        },
        {
            "name": "Practice Set 6",
            "questions": [
                {
                    "id": "d4_q001_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the primary function of the `@PreDestroy` annotation?",
                    "options": [
                        "A) It marks a method to be executed before a bean is destroyed and removed from the application context.",
                        "B) It destroys the bean immediately when the method is called.",
                        "C) It is a marker for methods that are planned to be destroyed in a future version.",
                        "D) It prevents a bean from being destroyed."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "The `@PreDestroy` annotation is the JSR-250 standard way to specify a callback method for a bean's destruction phase. It's an alternative to implementing `DisposableBean` or specifying a `destroy-method` in XML."
                },
                {
                    "id": "d4_q002_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the difference between a Servlet Filter and a Spring HandlerInterceptor?",
                    "options": [
                        "A) Filters are part of Spring MVC, while Interceptors are part of the Servlet API.",
                        "B) Filters operate before the `DispatcherServlet`, while Interceptors operate within Spring MVC's dispatching mechanism, giving them access to the handler.",
                        "C) Interceptors can modify the request body, but Filters cannot.",
                        "D) There is no functional difference."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This is a key architectural distinction. Filters are a lower-level concept from the Servlet API. Interceptors are a Spring MVC concept that provides more fine-grained control with access to the `ApplicationContext` and the target handler (controller method)."
                },
                {
                    "id": "d4_q003_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What does `@Transactional(readOnly = true)` signify?",
                    "options": [
                        "A) It makes the underlying database read-only.",
                        "B) It is a performance optimization hint for the persistence provider that no modifications will occur in this transaction.",
                        "C) It prevents the method from reading any data.",
                        "D) It ensures the transaction can only be rolled back."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Marking a transaction as read-only can allow the JPA provider and the database to apply optimizations, such as not needing to flush the persistence context or using a more efficient isolation level. It's a good practice for all read-only service methods."
                },
                {
                    "id": "d4_q004_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "Which of the following is NOT a standard component of OAuth2?",
                    "options": [
                        "A) Resource Owner",
                        "B) Client",
                        "C) Authorization Server",
                        "D) Service Provider"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "The four main roles in the OAuth2 specification are Resource Owner (the user), Client (the application), Authorization Server (handles authorization), and Resource Server (hosts the protected resources). 'Service Provider' is a more generic term."
                },
                {
                    "id": "d4_q005_s4",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "How can you expose all Actuator endpoints over HTTP, including sensitive ones like `/heapdump`?",
                    "options": [
                        "A) It is not possible for security reasons.",
                        "B) By setting `management.server.port` to a different port.",
                        "C) By setting `management.endpoints.web.exposure.include=*`.",
                        "D) By setting `endpoints.sensitive=false`."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "By default, only `/health` and `/info` are exposed over HTTP. The `management.endpoints.web.exposure.include` property allows you to specify a comma-separated list of endpoint IDs to expose, with `*` meaning all endpoints."
                },
                {
                    "id": "d4_q006_s4",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `TestEntityManager` in a `@DataJpaTest`?",
                    "options": [
                        "A) It is a mock of the real `EntityManager`.",
                        "B) It is a subset of `EntityManager` designed specifically for tests, providing methods that are not intended for production code.",
                        "C) It manages test-specific database schemas.",
                        "D) It is an `EntityManager` that only works with in-memory databases."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`TestEntityManager` is a helpful utility provided by Spring Boot for JPA tests. It provides methods like `persistAndFlush` that simplify common test scenarios, allowing you to persist an entity and immediately flush the changes to the database for assertions."
                },
                {
                    "id": "d4_q007_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "Which annotation allows a `@Configuration` class to import other configuration classes?",
                    "options": [
                        "A) `@ComponentScan`",
                        "B) `@EnableAutoConfiguration`",
                        "C) `@Import`",
                        "D) `@Include`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `@Import` annotation provides a way to compose configuration classes. It's a more explicit alternative to component scanning for including specific configurations."
                },
                {
                    "id": "d4_q008_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `Specification` interface in Spring Data JPA?",
                    "options": [
                        "A) To specify the database schema.",
                        "B) To define type-safe, dynamic queries programmatically using the JPA Criteria API.",
                        "C) To specify the version of the JPA specification to use.",
                        "D) To define custom repository implementations."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `Specification` interface allows you to build up a query programmatically using a fluent API based on the JPA Criteria API. It's extremely powerful for building complex queries with dynamic conditions that cannot be expressed easily with derived query methods."
                },
                {
                    "id": "d4_q009_s4",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "In a microservices architecture, what is the role of an API Gateway like Spring Cloud Gateway?",
                    "options": [
                        "A) It is a database for storing API schemas.",
                        "B) It provides a single entry point for all clients, handling concerns like routing, security, and rate limiting.",
                        "C) It discovers and registers all available services.",
                        "D) It traces requests as they move between services."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An API Gateway acts as a reverse proxy and facade for your backend microservices. It simplifies the client-side code and provides a central place to enforce cross-cutting concerns."
                },
                {
                    "id": "d4_q010_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "How can you validate an object that is nested inside another object in a request body?",
                    "options": [
                        "A) This is not possible; validation only works on top-level objects.",
                        "B) By annotating the field for the nested object with `@Valid`.",
                        "C) By writing a custom validator for the parent object.",
                        "D) By annotating the nested class with `@Validated`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "To trigger validation on a nested object, you must annotate the field referencing it with `@Valid`. This tells the validation engine to cascade the validation process down into the properties of the nested object."
                },
                {
                    "id": "d4_q011_s4",
                    "domain": "Spring Boot Messaging",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of a `RabbitTemplate` in Spring AMQP?",
                    "options": [
                        "A) It is a template for creating RabbitMQ configuration files.",
                        "B) It is a high-level abstraction for sending and receiving messages with RabbitMQ, simplifying the interaction.",
                        "C) It provides a user interface for managing a RabbitMQ server.",
                        "D) It is a listener for incoming RabbitMQ messages."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`RabbitTemplate` is a helper class that simplifies synchronous RabbitMQ access. It handles resource management and converts exceptions, similar to how `JdbcTemplate` simplifies JDBC access."
                },
                {
                    "id": "d4_q012_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What happens if you define a bean with the same name or type in two different `@Configuration` classes?",
                    "options": [
                        "A) The application will fail to start due to a bean definition conflict.",
                        "B) The last bean definition loaded will override the previous ones.",
                        "C) Spring will automatically merge the two bean definitions.",
                        "D) The bean that is in a class with a higher `@Order` will be used."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, Spring Boot allows bean definition overriding. The bean definition that is processed last will win. You can change this behavior by setting `spring.main.allow-bean-definition-overriding=false`."
                },
                {
                    "id": "d4_q013_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "What is the role of the `AuthenticationManager` in Spring Security?",
                    "options": [
                        "A) It manages user roles and permissions.",
                        "B) It is the main strategy interface for authenticating a request.",
                        "C) It manages the lifecycle of `Authentication` objects.",
                        "D) It manages the security filter chain."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `AuthenticationManager` is the core of Spring Security's authentication architecture. It receives an `Authentication` token (e.g., with username/password), passes it to a configured `AuthenticationProvider`, and returns a fully populated `Authentication` object if successful."
                },
                {
                    "id": "d4_q014_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the most common connection pool implementation provided by default in Spring Boot 2.x?",
                    "options": [
                        "A) Tomcat JDBC Pool",
                        "B) C3P0",
                        "C) HikariCP",
                        "D) Commons DBCP2"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Spring Boot 2.0 switched the default connection pool to HikariCP due to its superior performance and reliability. If HikariCP is on the classpath, Spring Boot will auto-configure it."
                },
                {
                    "id": "d4_q015_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "How do you get the value of a cookie in a Spring MVC controller method?",
                    "options": [
                        "A) By injecting the `HttpServletRequest` and calling `getCookies()`.",
                        "B) By using the `@CookieValue` annotation on a method parameter.",
                        "C) By using `@RequestParam` with a specific prefix.",
                        "D) Both A and B are valid."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "While you can always fall back to the raw `HttpServletRequest`, Spring MVC provides the convenient `@CookieValue` annotation to bind a method parameter directly to the value of a specific cookie."
                },
                {
                    "id": "d4_q016_s4",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "How can you override properties for a specific test class?",
                    "options": [
                        "A) By creating a `test.properties` file in the same package as the test.",
                        "B) By using the `@TestPropertySource` annotation on the test class.",
                        "C) By using `System.setProperty()` in a `@BeforeEach` method.",
                        "D) You cannot override properties for a single test."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@TestPropertySource` is a declarative way to add properties to the `Environment` for an integration test. It can be used to point to a properties file or to specify properties inline."
                },
                {
                    "id": "d4_q017_s4",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What is the default scope for a bean defined in a Spring container?",
                    "options": [
                        "A) prototype",
                        "B) request",
                        "C) session",
                        "D) singleton"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Unless specified otherwise, every bean defined in the Spring IoC container is a singleton. This means only one instance of that bean is created and shared throughout the entire application context."
                },
                {
                    "id": "d4_q018_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@ConditionalOnMissingBean` annotation?",
                    "options": [
                        "A) It creates a bean only if another specified bean is missing from the context.",
                        "B) It marks a bean as missing so it will be created by another configuration.",
                        "C) It triggers an error if a specific bean is missing.",
                        "D) It is used to find beans that have been misplaced."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "This is a very common conditional annotation used heavily in Spring Boot's auto-configuration. It allows developers to define default beans that can be easily overridden by the user simply by defining their own bean of the same type. This is a key part of Boot's 'opinionated but flexible' nature."
                },
                {
                    "id": "d4_q019_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the role of a `ViewResolver` in Spring MVC?",
                    "options": [
                        "A) It resolves which database view to query.",
                        "B) It maps a logical view name returned from a controller to a specific view implementation (like a Thymeleaf template or a JSP file).",
                        "C) It resolves conflicts between different views.",
                        "D) It provides a read-only view of the application model."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "In traditional (non-REST) Spring MVC, controllers return a logical view name (a `String`). The `DispatcherServlet` then consults the configured `ViewResolver`s to determine which actual view technology and template should be used to render the response."
                },
                {
                    "id": "d4_q020_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which transaction propagation level will always start a new, independent transaction, suspending any current transaction?",
                    "options": [
                        "A) `PROPAGATION_REQUIRED`",
                        "B) `PROPAGATION_NESTED`",
                        "C) `PROPAGATION_REQUIRES_NEW`",
                        "D) `PROPAGATION_MANDATORY`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`REQUIRES_NEW` creates a completely separate transaction. This is useful when you need to ensure a piece of work commits or rolls back regardless of the outcome of the outer transaction (e.g., for auditing)."
                },
                {
                    "id": "d4_q021_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is a key difference between authentication and authorization?",
                    "options": [
                        "A) Authentication is for users, authorization is for machines.",
                        "B) Authorization happens before authentication.",
                        "C) Authentication is about verifying who you are, while authorization is about determining what you are allowed to do.",
                        "D) They are the same concept."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "This is a fundamental security concept. Authentication (AuthN) answers the question 'Who are you?'. Authorization (AuthZ) answers the question 'What are you permitted to do?'. You must be authenticated before you can be authorized."
                },
                {
                    "id": "d4_q022_s4",
                    "domain": "Spring Cloud",
                    "difficulty": "Medium",
                    "question_text": "Which pattern is used to prevent cascading failures in a microservices architecture when a downstream service is slow or unavailable?",
                    "options": [
                        "A) API Gateway Pattern",
                        "B) Service Discovery Pattern",
                        "C) Circuit Breaker Pattern",
                        "D) Centralized Configuration Pattern"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The Circuit Breaker pattern (implemented by libraries like Resilience4j or the older Hystrix) wraps protected calls in an object that monitors for failures. After a certain threshold of failures, the circuit 'opens' and subsequent calls fail immediately, preventing the application from waiting on a failing service."
                },
                {
                    "id": "d4_q023_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of Spring Boot's 'executable JAR' format?",
                    "options": [
                        "A) To make the JAR file smaller.",
                        "B) To bundle all dependencies and an embedded server into a single, runnable artifact that can be launched with `java -jar`.",
                        "C) To encrypt the JAR's contents.",
                        "D) To make the JAR file compatible with all operating systems."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A standard JAR cannot contain other JARs. Spring Boot uses a special layout and a custom launcher to create a self-contained, executable 'fat JAR' (or 'uber JAR') that includes all necessary dependencies, simplifying deployment significantly."
                },
                {
                    "id": "d4_q024_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "In a Spring Data repository, how would you define a method to find all users older than a certain age and sort them by last name?",
                    "options": [
                        "A) `List<User> findByAgeGreaterThanOrderByLastNameAsc(int age);`",
                        "B) `List<User> findUsersWhereAgeIsMoreAndSortedByName(int age);`",
                        "C) You must use the `@Query` annotation for this.",
                        "D) `List<User> findByAgeAndSortByLastName(int age, Sort sort);`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "This is an example of a 'derived query method'. Spring Data can parse the method name to create the query. `FindByAgeGreaterThan` translates to a `WHERE age > ?` clause, and `OrderByLastNameAsc` adds an `ORDER BY lastName ASC` clause."
                },
                {
                    "id": "d4_q025_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Easy",
                    "question_text": "What is the most common HTTP status code to return for a successful GET request that found a resource?",
                    "options": [
                        "A) 201 Created",
                        "B) 204 No Content",
                        "C) 404 Not Found",
                        "D) 200 OK"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "HTTP 200 OK is the standard response for successful HTTP requests. 201 is for successful resource creation (POST), 204 is for success with no body to return (e.g., DELETE), and 404 is for when the resource does not exist."
                },
                {
                    "id": "d4_q026_s4",
                    "domain": "Spring Framework",
                    "difficulty": "Hard",
                    "question_text": "Which AOP advice type gives you the most control over a method's execution?",
                    "options": [
                        "A) `@Before`",
                        "B) `@AfterReturning`",
                        "C) `@Around`",
                        "D) `@AfterThrowing`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "`@Around` advice wraps the called method. This means it can perform logic before and after the method runs, modify the arguments, change the returned value, or even prevent the method from running altogether. This power comes with the responsibility of calling `ProceedingJoinPoint.proceed()`."
                },
                {
                    "id": "d4_q027_s4",
                    "domain": "Spring Boot Caching",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to remove one or all entries from a cache?",
                    "options": [
                        "A) `@CacheEvict`",
                        "B) `@Cacheable`",
                        "C) `@CachePut`",
                        "D) `@CacheRemove`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`@CacheEvict` is used to trigger a cache eviction. You can evict a single entry based on a key, or set its `allEntries` attribute to `true` to clear the entire cache."
                },
                {
                    "id": "d4_q028_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is JWT (JSON Web Token)?",
                    "options": [
                        "A) A way to encrypt the entire HTTP session.",
                        "B) A compact, URL-safe means of representing claims to be transferred between two parties, often used for stateless authentication.",
                        "C) A JavaScript library for web security.",
                        "D) A type of database token."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A JWT is a standard (RFC 7519) for creating digitally signed tokens that contain a JSON payload. Because they are signed, they are tamper-proof, making them ideal for passing user identity and permissions in a stateless microservices environment."
                },
                {
                    "id": "d4_q029_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@AliasFor` annotation?",
                    "options": [
                        "A) To create an alias for a bean name.",
                        "B) To declare an alias for an annotation attribute, either within the same annotation or to override an attribute in a meta-annotation.",
                        "C) To create an alias for a URL path in a controller.",
                        "D) To define an alias for a database table."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@AliasFor` is a powerful meta-annotation used to build custom, composed annotations. It allows you to create a new attribute that is an alias for an existing one, making your custom annotations more expressive and flexible."
                },
                {
                    "id": "d4_q030_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the default fetch type for a `@OneToMany` relationship in JPA?",
                    "options": [
                        "A) EAGER",
                        "B) It depends on the JPA provider.",
                        "C) LAZY",
                        "D) There is no default; it must be specified."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The JPA specification defines the default fetch type for all collection-based relationships (`@OneToMany`, `@ManyToMany`) as `LAZY`. This is a sensible default to avoid accidentally fetching large graphs of objects and causing performance issues."
                },
                {
                    "id": "d4_q031_s4",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "When using `MockMvc`, what is the purpose of the `andExpect()` method?",
                    "options": [
                        "A) To set up an expectation before the request is performed.",
                        "B) To define assertions on the result of the performed request, such as checking the status code or response body.",
                        "C) To specify what you expect the controller to do.",
                        "D) To catch expected exceptions from the controller."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The typical flow with `MockMvc` is perform-and-expect. You call `mockMvc.perform(...)` to execute the request, and then chain `.andExpect(...)` calls to assert various aspects of the `MvcResult`, like `status().isOk()` or `jsonPath(\"$.name\").value(\"test\")`."
                },
                {
                    "id": "d4_q032_s4",
                    "domain": "Spring Boot Webflux",
                    "difficulty": "Hard",
                    "question_text": "Which embedded server is the default for a `spring-boot-starter-webflux` application?",
                    "options": [
                        "A) Tomcat",
                        "B) Jetty",
                        "C) Undertow",
                        "D) Netty"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Because WebFlux is a reactive, non-blocking framework, it requires a server built on the same principles. Netty is an event-driven, asynchronous server and is the default choice for WebFlux. Tomcat, Jetty, and Undertow are primarily based on the blocking Servlet API."
                },
                {
                    "id": "d4_q033_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "Which property allows you to change the context path of a Spring Boot web application?",
                    "options": [
                        "A) `server.context-path`",
                        "B) `spring.mvc.servlet.path`",
                        "C) `server.servlet.context-path`",
                        "D) `spring.application.path`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The correct property to set the application's context path (e.g., `/myapp`) is `server.servlet.context-path`. The property `spring.mvc.servlet.path` is used to configure the path of the `DispatcherServlet` within the context."
                },
                {
                    "id": "d4_q034_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is the primary purpose of the `HttpFirewall` in Spring Security?",
                    "options": [
                        "A) To configure firewall rules on the host machine.",
                        "B) To inspect incoming `HttpServletRequest`s and reject requests that appear to be malicious (e.g., path traversal attacks).",
                        "C) To provide a firewall for database connections.",
                        "D) To block requests from specific IP addresses."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `HttpFirewall` is a security component that sanitizes and validates incoming requests at a very low level before they are processed by the filter chain. It protects against various HTTP-level attacks."
                },
                {
                    "id": "d4_q035_s4",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Hard",
                    "question_text": "Which Actuator endpoint would you use to get a snapshot of the current state of all threads in the JVM?",
                    "options": [
                        "A) `/threads`",
                        "B) `/jvm`",
                        "C) `/threaddump`",
                        "D) `/heapdump`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `/threaddump` endpoint provides a full thread dump, which is extremely useful for diagnosing deadlocks, high CPU usage, or other concurrency-related issues in a running application."
                },
                {
                    "id": "d4_q036_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which interface is the top-level, marker interface in the Spring Data repository hierarchy?",
                    "options": [
                        "A) `CrudRepository`",
                        "B) `Repository`",
                        "C) `JpaRepository`",
                        "D) `PagingAndSortingRepository`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`Repository` is the central marker interface. While it has no methods itself, extending it allows Spring to discover your repository interface and provide an implementation. You typically extend one of its sub-interfaces to get CRUD and other methods for free."
                },
                {
                    "id": "d4_q037_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of the `@EnableAsync` annotation?",
                    "options": [
                        "A) It enables asynchronous support in the embedded web server.",
                        "B) It enables Spring's asynchronous method execution capability, used with the `@Async` annotation.",
                        "C) It enables asynchronous logging.",
                        "D) It makes all bean initializations asynchronous."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "To use the `@Async` annotation on methods to have them execute in a separate thread, you must first enable this feature by adding `@EnableAsync` to a `@Configuration` class. This triggers the creation of the necessary proxies and thread pools."
                },
                {
                    "id": "d4_q038_s4",
                    "domain": "Spring Framework",
                    "difficulty": "Medium",
                    "question_text": "What design pattern is the Spring Framework's IoC container based on?",
                    "options": [
                        "A) Singleton Pattern",
                        "B) Factory Pattern",
                        "C) Observer Pattern",
                        "D) Inversion of Control"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Inversion of Control (IoC) is the core principle. Instead of your objects creating their own dependencies, you cede control of object creation and wiring to the container. Dependency Injection (DI) is the primary way this principle is implemented."
                },
                {
                    "id": "d4_q039_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "How do you handle a `MultipartFile` upload in a Spring MVC controller?",
                    "options": [
                        "A) By reading the `InputStream` from the `HttpServletRequest` manually.",
                        "B) By adding a parameter of type `MultipartFile` annotated with `@RequestParam` to your handler method.",
                        "C) By injecting a `MultipartResolver` bean.",
                        "D) By using `@RequestBody` with a byte array."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring MVC greatly simplifies file uploads. You just need to ensure your form is `multipart/form-data` and then add a `@RequestParam(\"file\") MultipartFile file` parameter to your controller method. Spring's `MultipartResolver` will handle the rest."
                },
                {
                    "id": "d4_q040_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to gain access to the currently authenticated principal object in a controller method?",
                    "options": [
                        "A) `@AuthenticationPrincipal`",
                        "B) `@CurrentUser`",
                        "C) `@Principal`",
                        "D) `@AuthenticatedUser`"
                    ],
                    "correct_answer_index": 0,
                    "explanation": "`@AuthenticationPrincipal` is a convenient annotation that resolves the `Principal` from the current `Authentication` object and injects it as a method argument. It can be typed to your custom `UserDetails` implementation for direct access."
                },
                {
                    "id": "d4_q041_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of `spring.jpa.defer-datasource-initialization=true`?",
                    "options": [
                        "A) It delays the initialization of the entire application.",
                        "B) It runs `schema.sql` and `data.sql` scripts after the `EntityManagerFactory` bean has been created, allowing it to work with Hibernate's `ddl-auto`.",
                        "C) It defers all database writes until the application shuts down.",
                        "D) It initializes the datasource in a separate thread."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, data script initialization happens before Hibernate's schema management (`ddl-auto`). Setting this property to `true` reverses the order, which is useful if your `data.sql` script needs to populate tables that were just created by `ddl-auto`."
                },
                {
                    "id": "d4_q042_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Easy",
                    "question_text": "What build system(s) does Spring Boot provide first-class support for with its plugins?",
                    "options": [
                        "A) Maven only",
                        "B) Gradle only",
                        "C) Ant only",
                        "D) Maven and Gradle"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring Boot provides dedicated plugins (`spring-boot-maven-plugin` and `spring-boot-gradle-plugin`) for both Maven and Gradle. These plugins are essential for creating executable JARs and running the application during development."
                },
                {
                    "id": "d4_q043_s4",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Hard",
                    "question_text": "What is `OutputCapture` or `CapturedOutput` used for in Spring Boot tests?",
                    "options": [
                        "A) To capture screenshots of the application during a test.",
                        "B) To capture and assert against text written to `System.out` and `System.err`, which is useful for testing console output or logging.",
                        "C) To capture the HTTP response body.",
                        "D) To capture performance metrics during a test run."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This is a JUnit extension/rule provided by Spring Boot that allows you to capture console output. It's very useful for verifying that specific log messages are being written as expected under certain conditions."
                },
                {
                    "id": "d4_q044_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `@CookieValue` annotation in a controller?",
                    "options": [
                        "A) To set the value of a cookie in the response.",
                        "B) To bind the value of an HTTP cookie to a method parameter.",
                        "C) To encrypt a cookie's value.",
                        "D) To validate the format of a cookie."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "The `@CookieValue` annotation is a convenient way to access the value of a specific cookie without having to manually parse the `Cookie` array from the `HttpServletRequest`."
                },
                {
                    "id": "d4_q045_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which transaction propagation level supports running within an existing transaction, but throws an exception if no transaction is active?",
                    "options": [
                        "A) `PROPAGATION_SUPPORTS`",
                        "B) `PROPAGATION_NEVER`",
                        "C) `PROPAGATION_NESTED`",
                        "D) `PROPAGATION_MANDATORY`"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "`MANDATORY` is the logical opposite of `SUPPORTS`. It requires an active transaction to be present and will fail fast with an exception if it is called outside of a transactional context."
                },
                {
                    "id": "d4_q046_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "How can you get access to the `HttpServletRequest` object in a Spring controller method?",
                    "options": [
                        "A) It is not possible as Spring abstracts it away.",
                        "B) By adding it as a method parameter.",
                        "C) By injecting it with `@Autowired` into a field.",
                        "D) Both B and C are valid."
                    ],
                    "correct_answer_index": 3,
                    "explanation": "Spring MVC will automatically resolve and inject servlet-related objects like `HttpServletRequest`, `HttpServletResponse`, and `HttpSession` if you declare them as method parameters. You can also autowire them as fields, but method injection is often cleaner."
                },
                {
                    "id": "d4_q047_s4",
                    "domain": "Spring Cloud",
                    "difficulty": "Hard",
                    "question_text": "In Spring Cloud Config, what is the purpose of the `@RefreshScope` annotation?",
                    "options": [
                        "A) To refresh the entire application context periodically.",
                        "B) To mark a bean so that its state can be refreshed (i.e., re-initialized and re-injected) when a configuration change event occurs, without restarting the application.",
                        "C) To refresh the browser page when configuration changes.",
                        "D) To force a refresh of the Git repository on the Config Server."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@RefreshScope` is crucial for dynamic configuration. When a refresh is triggered (via the `/refresh` Actuator endpoint), any beans marked with `@RefreshScope` are destroyed and re-created, picking up the new property values from the Config Server."
                },
                {
                    "id": "d4_q048_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `spring.application.name` property?",
                    "options": [
                        "A) To set the display name in the IDE.",
                        "B) To provide a name for the application, which is used by various components like logging, Actuator, and Spring Cloud.",
                        "C) To set the name of the final JAR file.",
                        "D) To name the main configuration class."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Setting a `spring.application.name` is a best practice. It gives the application a consistent identifier used for service discovery registration, centralized logging, metrics tagging, and more."
                },
                {
                    "id": "d4_q049_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which `spring-boot-starter` would you use if you wanted to interact with a database using plain JDBC without JPA?",
                    "options": [
                        "A) `spring-boot-starter-data-jpa`",
                        "B) `spring-boot-starter-web`",
                        "C) `spring-boot-starter-jdbc`",
                        "D) `spring-boot-starter-db`"
                    ],
                    "correct_answer_index": 2,
                    "explanation": "The `spring-boot-starter-jdbc` provides support for `JdbcTemplate` and auto-configures a `DataSource`, but does not include any JPA or ORM libraries. It's the right choice for applications that prefer to work with plain SQL."
                },
                {
                    "id": "d4_q050_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Hard",
                    "question_text": "What is the primary difference between `@PutMapping` and `@PatchMapping`?",
                    "options": [
                        "A) `@PutMapping` is for creating, `@PatchMapping` is for updating.",
                        "B) Semantically, `@PutMapping` is for a full replacement of a resource, while `@PatchMapping` is for a partial update.",
                        "C) `@PatchMapping` is more secure than `@PutMapping`.",
                        "D) There is no difference; they are interchangeable."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "This is a key REST convention. A PUT request should contain the entire new state of the resource. A PATCH request, on the other hand, only needs to contain the specific fields that are being changed."
                },
                {
                    "id": "d4_q051_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is the role of a `GrantedAuthority` in Spring Security?",
                    "options": [
                        "A) It is an authority that grants JWTs.",
                        "B) It represents a permission or a role granted to the principal (user).",
                        "C) It is an object that grants access to the `ApplicationContext`.",
                        "D) It is a grant for an OAuth2 flow."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "A `GrantedAuthority` is essentially a permission string (e.g., 'ROLE_ADMIN' or 'READ_PRIVILEGE'). A collection of these is stored in the `Authentication` object, and they are used by `AccessDecisionManager`s to make authorization decisions."
                },
                {
                    "id": "d4_q052_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What does `@Lazy` annotation on a bean definition do?",
                    "options": [
                        "A) It makes the bean's methods execute slowly.",
                        "B) It tells the Spring container to not initialize the bean until it is first requested by another bean.",
                        "C) It marks the bean for lazy loading from the database.",
                        "D) It makes the bean's initialization a low-priority task."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "By default, singleton beans are created when the context starts. `@Lazy` defers the creation of a bean until it's actually needed, which can help improve application startup time, especially for heavyweight beans."
                },
                {
                    "id": "d4_q053_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Medium",
                    "question_text": "Which annotation is used to create an embeddable class in JPA, whose fields will be mapped to the table of the owning entity?",
                    "options": [
                        "A) `@Component`",
                        "B) `@Embeddable`",
                        "C) `@Entity`",
                        "D) `@MappedSuperclass`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "An `@Embeddable` class (like an `Address`) can be included in an `@Entity` class (like a `User`) by annotating a field of its type with `@Embedded`. The columns of the embeddable class become part of the entity's table."
                },
                {
                    "id": "d4_q054_s4",
                    "domain": "Spring Boot Testing",
                    "difficulty": "Medium",
                    "question_text": "Which annotation allows you to run a Spring Boot test using a specific profile?",
                    "options": [
                        "A) `@Profile(\"test\")`",
                        "B) `@ActiveProfiles(\"test\")`",
                        "C) `@TestProfile(\"test\")`",
                        "D) `@EnableProfile(\"test\")`"
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@ActiveProfiles` is the standard annotation from the Spring Test module used to declare which profiles should be active when loading the `ApplicationContext` for an integration test."
                },
                {
                    "id": "d4_q055_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "Which HTTP status code is most appropriate to return when a client provides invalid data that fails validation?",
                    "options": [
                        "A) 500 Internal Server Error",
                        "B) 404 Not Found",
                        "C) 403 Forbidden",
                        "D) 400 Bad Request"
                    ],
                    "correct_answer_index": 3,
                    "explanation": "HTTP 400 Bad Request is the correct status code to indicate that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."
                },
                {
                    "id": "d4_q056_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How does Spring Boot's `spring-boot-devtools` module improve the development experience?",
                    "options": [
                        "A) It provides a graphical user interface for debugging.",
                        "B) It enables automatic application restarts, LiveReload, and sensible development-time property defaults.",
                        "C) It optimizes the final JAR file for production.",
                        "D) It adds extra security checks for development."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`devtools` is a powerful productivity tool. Its main features are automatically restarting the application when classpath files change and disabling template caches, which provides a much faster feedback loop during development."
                },
                {
                    "id": "d4_q057_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What is a major benefit of using `JdbcTemplate` over standard JDBC?",
                    "options": [
                        "A) It is faster than standard JDBC.",
                        "B) It handles resource management (like closing connections and statements) and translates checked `SQLExceptions` into unchecked `DataAccessExceptions`.",
                        "C) It provides an ORM layer.",
                        "D) It can only be used with Spring Boot."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`JdbcTemplate` is a classic Spring helper class that eliminates the verbose and error-prone boilerplate code associated with JDBC. You only need to focus on writing the SQL and handling the results, not on the try-catch-finally blocks for resource cleanup."
                },
                {
                    "id": "d4_q058_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Medium",
                    "question_text": "What is the purpose of the `.antMatchers()` method in a Spring Security configuration chain?",
                    "options": [
                        "A) To match against Ant build file patterns.",
                        "B) To specify URL patterns using Ant-style path expressions (e.g., `/api/**`) to which security rules should apply.",
                        "C) To match against user agent strings.",
                        "D) To find users who match a certain pattern."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`antMatchers` is a fundamental part of configuring `HttpSecurity`. It allows you to define authorization rules for specific sets of URLs, such as permitting all access to `/public/**` or requiring authentication for `/api/**`."
                },
                {
                    "id": "d4_q059_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "How can you make a Spring Boot application listen on a random, unused port?",
                    "options": [
                        "A) This is the default behavior.",
                        "B) By setting `server.port=random`.",
                        "C) By setting `server.port=0`.",
                        "D) By not setting the `server.port` property at all."
                    ],
                    "correct_answer_index": 2,
                    "explanation": "Setting `server.port=0` tells the embedded server to scan for and bind to an available port on the host machine. This is extremely useful for running integration tests in parallel without port conflicts."
                },
                {
                    "id": "d4_q060_s4",
                    "domain": "Spring Boot Webflux",
                    "difficulty": "Hard",
                    "question_text": "In `WebTestClient` (for testing WebFlux endpoints), what is the purpose of the `exchange()` method?",
                    "options": [
                        "A) It is the final step that performs the request and returns a result spec for assertions.",
                        "B) It exchanges the current request for a new one.",
                        "C) It exchanges security tokens with the server.",
                        "D) It sends the request but does not wait for a response."
                    ],
                    "correct_answer_index": 0,
                    "explanation": "In `WebTestClient`, you build up a request specification, and then `exchange()` is the terminal operation that executes it. It returns an `ExchangeResult` on which you can perform detailed assertions on the status, headers, and body."
                },
                {
                    "id": "d4_q061_s4",
                    "domain": "Spring Boot Actuator",
                    "difficulty": "Medium",
                    "question_text": "What is the main purpose of Micrometer in the context of Spring Boot?",
                    "options": [
                        "A) To measure the physical size of beans.",
                        "B) To act as a vendor-neutral application metrics facade, allowing you to instrument your code with dimensional metrics.",
                        "C) To provide a micron-sized version of the Actuator.",
                        "D) To manage micrometer-level transactions."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Micrometer is the instrumentation library that powers the `/metrics` endpoint in Spring Boot 2. It provides a simple facade over numerous monitoring systems (like Prometheus, Datadog, etc.), so you can instrument your code once and export the metrics to different backends."
                },
                {
                    "id": "d4_q062_s4",
                    "domain": "Spring Boot Data",
                    "difficulty": "Hard",
                    "question_text": "What does a `@MappedSuperclass` annotation on a class indicate in JPA?",
                    "options": [
                        "A) That it is a superclass for all controllers.",
                        "B) That its mapping information (fields, columns) will be inherited by its entity subclasses, but the class itself is not an entity and has no table.",
                        "C) That it maps to a super-table in the database.",
                        "D) That it is a superclass for all repository interfaces."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "`@MappedSuperclass` is a way to share common persistent fields (like `id`, `version`, or audit fields) across multiple entities without using a database inheritance strategy. It's purely for mapping inheritance, not entity inheritance."
                },
                {
                    "id": "d4_q063_s4",
                    "domain": "Spring Boot Core",
                    "difficulty": "Medium",
                    "question_text": "What is the recommended way to handle a graceful shutdown in a Spring Boot application?",
                    "options": [
                        "A) By calling `System.exit(0)` in a `@PreDestroy` method.",
                        "B) By enabling the `/shutdown` Actuator endpoint and sending a POST request to it.",
                        "C) By sending a `SIGKILL` signal to the process.",
                        "D) Graceful shutdown is not supported."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot supports graceful shutdown, where it will stop accepting new requests and wait for existing ones to complete. This is typically triggered by the `SIGTERM` signal from a platform like Docker or Kubernetes, but it can also be triggered via the `/shutdown` Actuator endpoint (which must be enabled and secured)."
                },
                {
                    "id": "d4_q064_s4",
                    "domain": "Spring Boot Web",
                    "difficulty": "Medium",
                    "question_text": "If you want to create a custom error page for a 404 Not Found status, what is the simplest way in Spring Boot?",
                    "options": [
                        "A) By creating a class that implements `ErrorController`.",
                        "B) By creating a static HTML file named `404.html` in a `/public/error/` or `/static/error/` directory.",
                        "C) By configuring an `ErrorViewResolver` bean.",
                        "D) By creating a `ModelAndView` named `error/404`."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Spring Boot's auto-configuration for error handling will automatically pick up static error pages based on a naming convention. Simply placing a file named after the status code in a standard static resource error directory is the easiest way to override the default 'Whitelabel Error Page'."
                },
                {
                    "id": "d4_q065_s4",
                    "domain": "Spring Boot Security",
                    "difficulty": "Hard",
                    "question_text": "What is the purpose of setting a `sessionCreationPolicy` to `STATELESS` in Spring Security?",
                    "options": [
                        "A) To make the entire application stateless.",
                        "B) To instruct Spring Security to never create an `HttpSession` and to not use it to store the `SecurityContext`.",
                        "C) To ensure the session has no state, but is still created.",
                        "D) To use a distributed session store like Redis."
                    ],
                    "correct_answer_index": 1,
                    "explanation": "Setting the session creation policy to `STATELESS` is essential for building stateless REST APIs that use token-based authentication (like JWT). It ensures that each request must be authenticated independently, as no server-side session state is maintained between requests."
                }
            ]
        }
    ]
}